% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/paws.ecs_operations.R
\name{create_service}
\alias{create_service}
\title{Runs and maintains a desired number of tasks from a specified task definition}
\usage{
create_service(cluster = NULL, serviceName, taskDefinition,
  loadBalancers = NULL, serviceRegistries = NULL,
  desiredCount = NULL, clientToken = NULL, launchType = NULL,
  platformVersion = NULL, role = NULL,
  deploymentConfiguration = NULL, placementConstraints = NULL,
  placementStrategy = NULL, networkConfiguration = NULL,
  healthCheckGracePeriodSeconds = NULL, schedulingStrategy = NULL)
}
\arguments{
\item{cluster}{The short name or full Amazon Resource Name (ARN) of the cluster on which to run your service. If you do not specify a cluster, the default cluster is assumed.}

\item{serviceName}{[required] The name of your service. Up to 255 letters (uppercase and lowercase), numbers, hyphens, and underscores are allowed. Service names must be unique within a cluster, but you can have similarly named services in multiple clusters within a Region or across multiple Regions.}

\item{taskDefinition}{[required] The \code{family} and \code{revision} (\code{family:revision}) or full ARN of the task definition to run in your service. If a \code{revision} is not specified, the latest \code{ACTIVE} revision is used.}

\item{loadBalancers}{A load balancer object representing the load balancer to use with your service. Currently, you are limited to one load balancer or target group per service. After you create a service, the load balancer name or target group ARN, container name, and container port specified in the service definition are immutable.

For Classic Load Balancers, this object must contain the load balancer name, the container name (as it appears in a container definition), and the container port to access from the load balancer. When a task from this service is placed on a container instance, the container instance is registered with the load balancer specified here.

For Application Load Balancers and Network Load Balancers, this object must contain the load balancer target group ARN, the container name (as it appears in a container definition), and the container port to access from the load balancer. When a task from this service is placed on a container instance, the container instance and port combination is registered as a target in the target group specified here.

Services with tasks that use the \code{awsvpc} network mode (for example, those with the Fargate launch type) only support Application Load Balancers and Network Load Balancers; Classic Load Balancers are not supported. Also, when you create any target groups for these services, you must choose \code{ip} as the target type, not \code{instance}, because tasks that use the \code{awsvpc} network mode are associated with an elastic network interface, not an Amazon EC2 instance.}

\item{serviceRegistries}{The details of the service discovery registries to assign to this service. For more information, see \href{http://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html}{Service Discovery}.

Service discovery is supported for Fargate tasks if using platform version v1.1.0 or later. For more information, see \href{http://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html}{AWS Fargate Platform Versions}.}

\item{desiredCount}{The number of instantiations of the specified task definition to place and keep running on your cluster.}

\item{clientToken}{Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up to 32 ASCII characters are allowed.}

\item{launchType}{The launch type on which to run your service.}

\item{platformVersion}{The platform version on which to run your service. If one is not specified, the latest version is used by default.}

\item{role}{The name or full Amazon Resource Name (ARN) of the IAM role that allows Amazon ECS to make calls to your load balancer on your behalf. This parameter is only permitted if you are using a load balancer with your service and your task definition does not use the \code{awsvpc} network mode. If you specify the \code{role} parameter, you must also specify a load balancer object with the \code{loadBalancers} parameter.

If your account has already created the Amazon ECS service-linked role, that role is used by default for your service unless you specify a role here. The service-linked role is required if your task definition uses the \code{awsvpc} network mode, in which case you should not specify a role here. For more information, see \href{http://docs.aws.amazon.com/AmazonECS/latest/developerguide/using-service-linked-roles.html}{Using Service-Linked Roles for Amazon ECS} in the \emph{Amazon Elastic Container Service Developer Guide}.

If your specified role has a path other than \code{/}, then you must either specify the full role ARN (this is recommended) or prefix the role name with the path. For example, if a role with the name \code{bar} has a path of \code{/foo/} then you would specify \code{/foo/bar} as the role name. For more information, see \href{http://docs.aws.amazon.com/IAM/latest/UserGuide/reference_identifiers.html#identifiers-friendly-names}{Friendly Names and Paths} in the \emph{IAM User Guide}.}

\item{deploymentConfiguration}{Optional deployment parameters that control how many tasks run during the deployment and the ordering of stopping and starting tasks.}

\item{placementConstraints}{An array of placement constraint objects to use for tasks in your service. You can specify a maximum of 10 constraints per task (this limit includes constraints in the task definition and those specified at run time).}

\item{placementStrategy}{The placement strategy objects to use for tasks in your service. You can specify a maximum of five strategy rules per service.}

\item{networkConfiguration}{The network configuration for the service. This parameter is required for task definitions that use the \code{awsvpc} network mode to receive their own Elastic Network Interface, and it is not supported for other network modes. For more information, see \href{http://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-networking.html}{Task Networking} in the \emph{Amazon Elastic Container Service Developer Guide}.}

\item{healthCheckGracePeriodSeconds}{The period of time, in seconds, that the Amazon ECS service scheduler should ignore unhealthy Elastic Load Balancing target health checks after a task has first started. This is only valid if your service is configured to use a load balancer. If your service's tasks take a while to start and respond to Elastic Load Balancing health checks, you can specify a health check grace period of up to 7,200 seconds during which the ECS service scheduler ignores health check status. This grace period can prevent the ECS service scheduler from marking tasks as unhealthy and stopping them before they have time to come up.}

\item{schedulingStrategy}{The scheduling strategy to use for the service. For more information, see \href{http://docs.aws.amazon.com/AmazonECS/latest/developerguideecs_services.html}{Services}.

There are two service scheduler strategies available:
\itemize{
\item \code{REPLICA}-The replica scheduling strategy places and maintains the desired number of tasks across your cluster. By default, the service scheduler spreads tasks across Availability Zones. You can use task placement strategies and constraints to customize task placement decisions.
\item \code{DAEMON}-The daemon scheduling strategy deploys exactly one task on each active container instance that meets all of the task placement constraints that you specify in your cluster. When using this strategy, there is no need to specify a desired number of tasks, a task placement strategy, or use Service Auto Scaling policies.

Fargate tasks do not support the \code{DAEMON} scheduling strategy.
}}
}
\description{
Runs and maintains a desired number of tasks from a specified task definition. If the number of tasks running in a service drops below \code{desiredCount}, Amazon ECS spawns another copy of the task in the specified cluster. To update an existing service, see UpdateService.
}
\details{
In addition to maintaining the desired count of tasks in your service, you can optionally run your service behind a load balancer. The load balancer distributes traffic across the tasks that are associated with the service. For more information, see \href{http://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-load-balancing.html}{Service Load Balancing} in the \emph{Amazon Elastic Container Service Developer Guide}.

You can optionally specify a deployment configuration for your service. During a deployment, the service scheduler uses the \code{minimumHealthyPercent} and \code{maximumPercent} parameters to determine the deployment strategy. The deployment is triggered by changing the task definition or the desired count of a service with an UpdateService operation.

The \code{minimumHealthyPercent} represents a lower limit on the number of your service's tasks that must remain in the \code{RUNNING} state during a deployment, as a percentage of the \code{desiredCount} (rounded up to the nearest integer). This parameter enables you to deploy without using additional cluster capacity. For example, if your service has a \code{desiredCount} of four tasks and a \code{minimumHealthyPercent} of 50\%, the scheduler can stop two existing tasks to free up cluster capacity before starting two new tasks. Tasks for services that \emph{do not} use a load balancer are considered healthy if they are in the \code{RUNNING} state. Tasks for services that \emph{do} use a load balancer are considered healthy if they are in the \code{RUNNING} state and the container instance they are hosted on is reported as healthy by the load balancer. The default value for a replica service for \code{minimumHealthyPercent} is 50\% in the console and 100\% for the AWS CLI, the AWS SDKs, and the APIs. The default value for a daemon service for \code{minimumHealthyPercent} is 0\% for the AWS CLI, the AWS SDKs, and the APIs and 50\% for the console.

The \code{maximumPercent} parameter represents an upper limit on the number of your service's tasks that are allowed in the \code{RUNNING} or \code{PENDING} state during a deployment, as a percentage of the \code{desiredCount} (rounded down to the nearest integer). This parameter enables you to define the deployment batch size. For example, if your replica service has a \code{desiredCount} of four tasks and a \code{maximumPercent} value of 200\%, the scheduler can start four new tasks before stopping the four older tasks (provided that the cluster resources required to do this are available). The default value for a replica service for \code{maximumPercent} is 200\%. If you are using a daemon service type, the \code{maximumPercent} should remain at 100\%, which is the default value.

When the service scheduler launches new tasks, it determines task placement in your cluster using the following logic:
\itemize{
\item Determine which of the container instances in your cluster can support your service's task definition (for example, they have the required CPU, memory, ports, and container instance attributes).
\item By default, the service scheduler attempts to balance tasks across Availability Zones in this manner (although you can choose a different placement strategy) with the \code{placementStrategy} parameter):
\item Sort the valid container instances, giving priority to instances that have the fewest number of running tasks for this service in their respective Availability Zone. For example, if zone A has one running service task and zones B and C each have zero, valid container instances in either zone B or C are considered optimal for placement.
\item Place the new service task on a valid container instance in an optimal Availability Zone (based on the previous steps), favoring container instances with the fewest number of running tasks for this service.
}
}
\section{Accepted Parameters}{
\preformatted{create_service(
  cluster = "string",
  serviceName = "string",
  taskDefinition = "string",
  loadBalancers = list(
    list(
      targetGroupArn = "string",
      loadBalancerName = "string",
      containerName = "string",
      containerPort = 123
    )
  ),
  serviceRegistries = list(
    list(
      registryArn = "string",
      port = 123,
      containerName = "string",
      containerPort = 123
    )
  ),
  desiredCount = 123,
  clientToken = "string",
  launchType = "EC2"|"FARGATE",
  platformVersion = "string",
  role = "string",
  deploymentConfiguration = list(
    maximumPercent = 123,
    minimumHealthyPercent = 123
  ),
  placementConstraints = list(
    list(
      type = "distinctInstance"|"memberOf",
      expression = "string"
    )
  ),
  placementStrategy = list(
    list(
      type = "random"|"spread"|"binpack",
      field = "string"
    )
  ),
  networkConfiguration = list(
    awsvpcConfiguration = list(
      subnets = list(
        "string"
      ),
      securityGroups = list(
        "string"
      ),
      assignPublicIp = "ENABLED"|"DISABLED"
    )
  ),
  healthCheckGracePeriodSeconds = 123,
  schedulingStrategy = "REPLICA"|"DAEMON"
)
}
}

\examples{
# This example creates a service in your default region called
# ``ecs-simple-service``. The service uses the ``hello_world`` task
# definition and it maintains 10 copies of that task.
\donttest{create_service(
  desiredCount = 10L,
  serviceName = "ecs-simple-service",
  taskDefinition = "hello_world"
)}

# This example creates a service in your default region called
# ``ecs-simple-service-elb``. The service uses the ``ecs-demo`` task
# definition and it maintains 10 copies of that task. You must reference
# an existing load balancer in the same region by its name.
\donttest{create_service(
  desiredCount = 10L,
  loadBalancers = list(
    list(
      containerName = "simple-app",
      containerPort = 80L,
      loadBalancerName = "EC2Contai-EcsElast-15DCDAURT3ZO2"
    )
  ),
  role = "ecsServiceRole",
  serviceName = "ecs-simple-service-elb",
  taskDefinition = "console-sample-app-static"
)}

}
