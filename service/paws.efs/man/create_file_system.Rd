% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/paws.efs_operations.R
\name{create_file_system}
\alias{create_file_system}
\title{Creates a new, empty file system}
\usage{
create_file_system(CreationToken, PerformanceMode = NULL,
  Encrypted = NULL, KmsKeyId = NULL, ThroughputMode = NULL,
  ProvisionedThroughputInMibps = NULL)
}
\arguments{
\item{CreationToken}{[required] String of up to 64 ASCII characters. Amazon EFS uses this to ensure idempotent creation.}

\item{PerformanceMode}{The \code{PerformanceMode} of the file system. We recommend \code{generalPurpose} performance mode for most file systems. File systems using the \code{maxIO} performance mode can scale to higher levels of aggregate throughput and operations per second with a tradeoff of slightly higher latencies for most file operations. This can't be changed after the file system has been created.}

\item{Encrypted}{A Boolean value that, if true, creates an encrypted file system. When creating an encrypted file system, you have the option of specifying a CreateFileSystemRequest\$KmsKeyId for an existing AWS Key Management Service (AWS KMS) customer master key (CMK). If you don't specify a CMK, then the default CMK for Amazon EFS, \code{/aws/elasticfilesystem}, is used to protect the encrypted file system.}

\item{KmsKeyId}{The ID of the AWS KMS CMK to be used to protect the encrypted file system. This parameter is only required if you want to use a non-default CMK. If this parameter is not specified, the default CMK for Amazon EFS is used. This ID can be in one of the following formats:
\itemize{
\item Key ID - A unique identifier of the key, for example, \code{1234abcd-12ab-34cd-56ef-1234567890ab}.
\item ARN - An Amazon Resource Name (ARN) for the key, for example, \code{arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab}.
\item Key alias - A previously created display name for a key. For example, \code{alias/projectKey1}.
\item Key alias ARN - An ARN for a key alias, for example, \code{arn:aws:kms:us-west-2:444455556666:alias/projectKey1}.
}

If KmsKeyId is specified, the CreateFileSystemRequest\$Encrypted parameter must be set to true.}

\item{ThroughputMode}{The throughput mode for the file system to be created. There are two throughput modes to choose from for your file system: bursting and provisioned. You can decrease your file system's throughput in Provisioned Throughput mode or change between the throughput modes as long as it's been more than 24 hours since the last decrease or throughput mode change.}

\item{ProvisionedThroughputInMibps}{The throughput, measured in MiB/s, that you want to provision for a file system that you're creating. The limit on throughput is 1024 MiB/s. You can get these limits increased by contacting AWS Support. For more information, see \href{http://docs.aws.amazon.com/efs/latest/ug/limits.html#soft-limits}{Amazon EFS Limits That You Can Increase} in the \emph{Amazon EFS User Guide.}}
}
\description{
Creates a new, empty file system. The operation requires a creation token in the request that Amazon EFS uses to ensure idempotent creation (calling the operation with same creation token has no effect). If a file system does not currently exist that is owned by the caller's AWS account with the specified creation token, this operation does the following:
}
\details{
\itemize{
\item Creates a new, empty file system. The file system will have an Amazon EFS assigned ID, and an initial lifecycle state \code{creating}.
\item Returns with the description of the created file system.
}

Otherwise, this operation returns a \code{FileSystemAlreadyExists} error with the ID of the existing file system.

For basic use cases, you can use a randomly generated UUID for the creation token.

The idempotent operation allows you to retry a \code{CreateFileSystem} call without risk of creating an extra file system. This can happen when an initial call fails in a way that leaves it uncertain whether or not a file system was actually created. An example might be that a transport level timeout occurred or your connection was reset. As long as you use the same creation token, if the initial call had succeeded in creating a file system, the client can learn of its existence from the \code{FileSystemAlreadyExists} error.

The \code{CreateFileSystem} call returns while the file system's lifecycle state is still \code{creating}. You can check the file system creation status by calling the DescribeFileSystems operation, which among other things returns the file system state.

This operation also takes an optional \code{PerformanceMode} parameter that you choose for your file system. We recommend \code{generalPurpose} performance mode for most file systems. File systems using the \code{maxIO} performance mode can scale to higher levels of aggregate throughput and operations per second with a tradeoff of slightly higher latencies for most file operations. The performance mode can't be changed after the file system has been created. For more information, see \href{http://docs.aws.amazon.com/efs/latest/ug/performance.html#performancemodes.html}{Amazon EFS: Performance Modes}.

After the file system is fully created, Amazon EFS sets its lifecycle state to \code{available}, at which point you can create one or more mount targets for the file system in your VPC. For more information, see CreateMountTarget. You mount your Amazon EFS file system on an EC2 instances in your VPC via the mount target. For more information, see \href{http://docs.aws.amazon.com/efs/latest/ug/how-it-works.html}{Amazon EFS: How it Works}.

This operation requires permissions for the \code{elasticfilesystem:CreateFileSystem} action.
}
\section{Accepted Parameters}{
\preformatted{create_file_system(
  CreationToken = "string",
  PerformanceMode = "generalPurpose"|"maxIO",
  Encrypted = TRUE|FALSE,
  KmsKeyId = "string",
  ThroughputMode = "bursting"|"provisioned",
  ProvisionedThroughputInMibps = 123.0
)
}
}

\examples{
# This operation creates a new file system with the default generalpurpose
# performance mode.
\donttest{create_file_system(
  CreationToken = "tokenstring",
  PerformanceMode = "generalPurpose"
)}

}
