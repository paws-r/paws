% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/paws.codedeploy_operations.R
\name{create_deployment}
\alias{create_deployment}
\title{Deploys an application revision through the specified deployment group}
\usage{
create_deployment(applicationName, deploymentGroupName = NULL,
  revision = NULL, deploymentConfigName = NULL, description = NULL,
  ignoreApplicationStopFailures = NULL, targetInstances = NULL,
  autoRollbackConfiguration = NULL, updateOutdatedInstancesOnly = NULL,
  fileExistsBehavior = NULL)
}
\arguments{
\item{applicationName}{[required] The name of an AWS CodeDeploy application associated with the IAM user or AWS account.}

\item{deploymentGroupName}{The name of the deployment group.}

\item{revision}{The type and location of the revision to deploy.}

\item{deploymentConfigName}{The name of a deployment configuration associated with the IAM user or AWS account.

If not specified, the value configured in the deployment group is used as the default. If the deployment group does not have a deployment configuration associated with it, CodeDeployDefault.OneAtATime is used by default.}

\item{description}{A comment about the deployment.}

\item{ignoreApplicationStopFailures}{If set to true, then if the deployment causes the ApplicationStop deployment lifecycle event to an instance to fail, the deployment to that instance is considered to have failed at that point and continues on to the BeforeInstall deployment lifecycle event.

If set to false or not specified, then if the deployment causes the ApplicationStop deployment lifecycle event to fail to an instance, the deployment to that instance stops, and the deployment to that instance is considered to have failed.}

\item{targetInstances}{Information about the instances that belong to the replacement environment in a blue/green deployment.}

\item{autoRollbackConfiguration}{Configuration information for an automatic rollback that is added when a deployment is created.}

\item{updateOutdatedInstancesOnly}{Indicates whether to deploy to all instances or only to instances that are not running the latest application revision.}

\item{fileExistsBehavior}{Information about how AWS CodeDeploy handles files that already exist in a deployment target location but weren't part of the previous successful deployment.

The fileExistsBehavior parameter takes any of the following values:
\itemize{
\item DISALLOW: The deployment fails. This is also the default behavior if no option is specified.
\item OVERWRITE: The version of the file from the application revision currently being deployed replaces the version already on the instance.
\item RETAIN: The version of the file already on the instance is kept and used as part of the new deployment.
}}
}
\description{
Deploys an application revision through the specified deployment group.
}
\section{Accepted Parameters}{
\preformatted{create_deployment(
  applicationName = "string",
  deploymentGroupName = "string",
  revision = list(
    revisionType = "S3"|"GitHub"|"String"|"AppSpecContent",
    s3Location = list(
      bucket = "string",
      key = "string",
      bundleType = "tar"|"tgz"|"zip"|"YAML"|"JSON",
      version = "string",
      eTag = "string"
    ),
    gitHubLocation = list(
      repository = "string",
      commitId = "string"
    ),
    string = list(
      content = "string",
      sha256 = "string"
    ),
    appSpecContent = list(
      content = "string",
      sha256 = "string"
    )
  ),
  deploymentConfigName = "string",
  description = "string",
  ignoreApplicationStopFailures = TRUE|FALSE,
  targetInstances = list(
    tagFilters = list(
      list(
        Key = "string",
        Value = "string",
        Type = "KEY_ONLY"|"VALUE_ONLY"|"KEY_AND_VALUE"
      )
    ),
    autoScalingGroups = list(
      "string"
    ),
    ec2TagSet = list(
      ec2TagSetList = list(
        list(
          list(
            Key = "string",
            Value = "string",
            Type = "KEY_ONLY"|"VALUE_ONLY"|"KEY_AND_VALUE"
          )
        )
      )
    )
  ),
  autoRollbackConfiguration = list(
    enabled = TRUE|FALSE,
    events = list(
      "DEPLOYMENT_FAILURE"|"DEPLOYMENT_STOP_ON_ALARM"|"DEPLOYMENT_STOP_ON_REQUEST"
    )
  ),
  updateOutdatedInstancesOnly = TRUE|FALSE,
  fileExistsBehavior = "DISALLOW"|"OVERWRITE"|"RETAIN"
)
}
}

