% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/paws.fsx_operations.R
\name{create_file_system}
\alias{create_file_system}
\title{Creates a new, empty Amazon FSx file system}
\usage{
create_file_system(ClientRequestToken = NULL, FileSystemType,
  StorageCapacity, SubnetIds, SecurityGroupIds = NULL, Tags = NULL,
  KmsKeyId = NULL, WindowsConfiguration = NULL,
  LustreConfiguration = NULL)
}
\arguments{
\item{ClientRequestToken}{(Optional) A string of up to 64 ASCII characters that Amazon FSx uses to ensure idempotent creation. This string is automatically filled on your behalf when you use the AWS Command Line Interface (AWS CLI) or an AWS SDK.}

\item{FileSystemType}{[required] The type of file system.}

\item{StorageCapacity}{[required] The storage capacity of the file system.

For Windows file systems, the storage capacity has a minimum of 300 GiB, and a maximum of 65,536 GiB.

For Lustre file systems, the storage capacity has a minimum of 3,600 GiB. Storage capacity is provisioned in increments of 3,600 GiB.}

\item{SubnetIds}{[required] A list of IDs for the subnets that the file system will be accessible from. File systems support only one subnet. The file server is also launched in that subnet's Availability Zone.}

\item{SecurityGroupIds}{A list of IDs for the security groups that apply to the specified network interfaces created for file system access. These security groups will apply to all network interfaces. This list isn't returned in later describe requests.}

\item{Tags}{The tags to be applied to the file system at file system creation. The key value of the \code{Name} tag appears in the console as the file system name.}

\item{KmsKeyId}{}

\item{WindowsConfiguration}{The configuration for this Microsoft Windows file system.}

\item{LustreConfiguration}{}
}
\description{
Creates a new, empty Amazon FSx file system.
}
\details{
If a file system with the specified client request token exists and the parameters match, \code{CreateFileSystem} returns the description of the existing file system. If a file system specified client request token exists and the parameters don't match, this call returns \code{IncompatibleParameterError}. If a file system with the specified client request token doesn't exist, \code{CreateFileSystem} does the following:
\itemize{
\item Creates a new, empty Amazon FSx file system with an assigned ID, and an initial lifecycle state of \code{CREATING}.
\item Returns the description of the file system.
}

This operation requires a client request token in the request that Amazon FSx uses to ensure idempotent creation. This means that calling the operation multiple times with the same client request token has no effect. By using the idempotent operation, you can retry a \code{CreateFileSystem} operation without the risk of creating an extra file system. This approach can be useful when an initial call fails in a way that makes it unclear whether a file system was created. Examples are if a transport level timeout occurred, or your connection was reset. If you use the same client request token and the initial call created a file system, the client receives success as long as the parameters are the same.

The \code{CreateFileSystem} call returns while the file system's lifecycle state is still \code{CREATING}. You can check the file-system creation status by calling the DescribeFileSystems operation, which returns the file system state along with other information.
}
\section{Accepted Parameters}{
\preformatted{create_file_system(
  ClientRequestToken = "string",
  FileSystemType = "WINDOWS"|"LUSTRE",
  StorageCapacity = 123,
  SubnetIds = list(
    "string"
  ),
  SecurityGroupIds = list(
    "string"
  ),
  Tags = list(
    list(
      Key = "string",
      Value = "string"
    )
  ),
  KmsKeyId = "string",
  WindowsConfiguration = list(
    ActiveDirectoryId = "string",
    ThroughputCapacity = 123,
    WeeklyMaintenanceStartTime = "string",
    DailyAutomaticBackupStartTime = "string",
    AutomaticBackupRetentionDays = 123,
    CopyTagsToBackups = TRUE|FALSE
  ),
  LustreConfiguration = list(
    WeeklyMaintenanceStartTime = "string",
    ImportPath = "string",
    ExportPath = "string",
    ImportedFileChunkSize = 123
  )
)
}
}

\examples{
# This operation creates a new file system.
\donttest{create_file_system(
  ClientRequestToken = "a8ca07e4-61ec-4399-99f4-19853801bcd5",
  FileSystemType = "WINDOWS",
  KmsKeyId = "arn:aws:kms:us-east-1:012345678912:key/0ff3ea8d-130e-4133-877f-93908b6fdbd6",
  SecurityGroupIds = list(
    "sg-edcd9784"
  ),
  StorageCapacity = 300L,
  SubnetIds = list(
    "subnet-1234abcd"
  ),
  Tags = list(
    list(
      Key = "Name",
      Value = "MyFileSystem"
    )
  ),
  WindowsConfiguration = list(
    ActiveDirectoryId = "d-1234abcd12",
    AutomaticBackupRetentionDays = 30L,
    DailyAutomaticBackupStartTime = "05:00",
    ThroughputCapacity = 8L,
    WeeklyMaintenanceStartTime = "1:05:00"
  )
)}

}
