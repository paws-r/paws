% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/paws.lambda_operations.R
\name{publish_version}
\alias{publish_version}
\title{Publishes a version of your function from the current snapshot of $LATEST}
\usage{
publish_version(FunctionName, CodeSha256 = NULL, Description = NULL,
  RevisionId = NULL)
}
\arguments{
\item{FunctionName}{[required] The name of the lambda function.

\strong{Name formats}
\itemize{
\item \strong{Function name} - \code{MyFunction}.
\item \strong{Function ARN} - \code{arn:aws:lambda:us-west-2:123456789012:function:MyFunction}.
\item \strong{Partial ARN} - \code{123456789012:function:MyFunction}.
}

The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.}

\item{CodeSha256}{The SHA256 hash of the deployment package you want to publish. This provides validation on the code you are publishing. If you provide this parameter, the value must match the SHA256 of the \$LATEST version for the publication to succeed. You can use the \strong{DryRun} parameter of UpdateFunctionCode to verify the hash value that will be returned before publishing your new version.}

\item{Description}{The description for the version you are publishing. If not provided, AWS Lambda copies the description from the \$LATEST version.}

\item{RevisionId}{An optional value you can use to ensure you are updating the latest update of the function version or alias. If the \code{RevisionID} you pass doesn't match the latest \code{RevisionId} of the function or alias, it will fail with an error message, advising you retrieve the latest function version or alias \code{RevisionID} using either GetFunction or GetAlias.}
}
\description{
Publishes a version of your function from the current snapshot of \$LATEST. That is, AWS Lambda takes a snapshot of the function code and configuration information from \$LATEST and publishes a new version. The code and configuration cannot be modified after publication. For information about the versioning feature, see \href{http://docs.aws.amazon.com/lambda/latest/dg/versioning-aliases.html}{AWS Lambda Function Versioning and Aliases}.
}
\section{Accepted Parameters}{
\preformatted{publish_version(
  FunctionName = "string",
  CodeSha256 = "string",
  Description = "string",
  RevisionId = "string"
)
}
}

\examples{
# This operation publishes a version of a Lambda function
\donttest{publish_version(
  CodeSha256 = "",
  Description = "",
  FunctionName = "myFunction"
)}

}
