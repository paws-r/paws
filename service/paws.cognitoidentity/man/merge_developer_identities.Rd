% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/paws.cognitoidentity_operations.R
\name{merge_developer_identities}
\alias{merge_developer_identities}
\title{Merges two users having different IdentityIds, existing in the same identity pool, and identified by the same developer provider}
\usage{
merge_developer_identities(SourceUserIdentifier, DestinationUserIdentifier,
  DeveloperProviderName, IdentityPoolId)
}
\arguments{
\item{SourceUserIdentifier}{[required] User identifier for the source user. The value should be a \code{DeveloperUserIdentifier}.}

\item{DestinationUserIdentifier}{[required] User identifier for the destination user. The value should be a \code{DeveloperUserIdentifier}.}

\item{DeveloperProviderName}{[required] The "domain" by which Cognito will refer to your users. This is a (pseudo) domain name that you provide while creating an identity pool. This name acts as a placeholder that allows your backend and the Cognito service to communicate about the developer provider. For the \code{DeveloperProviderName}, you can use letters as well as period (.), underscore (\_), and dash (-).}

\item{IdentityPoolId}{[required] An identity pool ID in the format REGION:GUID.}
}
\description{
Merges two users having different \code{IdentityId}s, existing in the same identity pool, and identified by the same developer provider. You can use this action to request that discrete users be merged and identified as a single user in the Cognito environment. Cognito associates the given source user (\code{SourceUserIdentifier}) with the \code{IdentityId} of the \code{DestinationUserIdentifier}. Only developer-authenticated users can be merged. If the users to be merged are associated with the same public provider, but as two different users, an exception will be thrown.
}
\details{
You must use AWS Developer credentials to call this API.
}
\section{Accepted Parameters}{
\preformatted{merge_developer_identities(
  SourceUserIdentifier = "string",
  DestinationUserIdentifier = "string",
  DeveloperProviderName = "string",
  IdentityPoolId = "string"
)
}
}

