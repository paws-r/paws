% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/paws.batch_operations.R
\name{create_compute_environment}
\alias{create_compute_environment}
\title{Creates an AWS Batch compute environment}
\usage{
create_compute_environment(computeEnvironmentName, type, state = NULL,
  computeResources = NULL, serviceRole)
}
\arguments{
\item{computeEnvironmentName}{[required] The name for your compute environment. Up to 128 letters (uppercase and lowercase), numbers, hyphens, and underscores are allowed.}

\item{type}{[required] The type of the compute environment.}

\item{state}{The state of the compute environment. If the state is \code{ENABLED}, then the compute environment accepts jobs from a queue and can scale out automatically based on queues.}

\item{computeResources}{Details of the compute resources managed by the compute environment. This parameter is required for managed compute environments.}

\item{serviceRole}{[required] The full Amazon Resource Name (ARN) of the IAM role that allows AWS Batch to make calls to other AWS services on your behalf.

If your specified role has a path other than \code{/}, then you must either specify the full role ARN (this is recommended) or prefix the role name with the path.

Depending on how you created your AWS Batch service role, its ARN may contain the \code{service-role} path prefix. When you only specify the name of the service role, AWS Batch assumes that your ARN does not use the \code{service-role} path prefix. Because of this, we recommend that you specify the full ARN of your service role when you create compute environments.}
}
\description{
Creates an AWS Batch compute environment. You can create \code{MANAGED} or \code{UNMANAGED} compute environments.
}
\details{
In a managed compute environment, AWS Batch manages the compute resources within the environment, based on the compute resources that you specify. Instances launched into a managed compute environment use a recent, approved version of the Amazon ECS-optimized AMI. You can choose to use Amazon EC2 On-Demand Instances in your managed compute environment, or you can use Amazon EC2 Spot Instances that only launch when the Spot bid price is below a specified percentage of the On-Demand price.

In an unmanaged compute environment, you can manage your own compute resources. This provides more compute resource configuration options, such as using a custom AMI, but you must ensure that your AMI meets the Amazon ECS container instance AMI specification. For more information, see \href{http://docs.aws.amazon.com/AmazonECS/latest/developerguide/container_instance_AMIs.html}{Container Instance AMIs} in the \emph{Amazon Elastic Container Service Developer Guide}. After you have created your unmanaged compute environment, you can use the DescribeComputeEnvironments operation to find the Amazon ECS cluster that is associated with it and then manually launch your container instances into that Amazon ECS cluster. For more information, see \href{http://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_container_instance.html}{Launching an Amazon ECS Container Instance} in the \emph{Amazon Elastic Container Service Developer Guide}.
}
\section{Accepted Parameters}{
\preformatted{create_compute_environment(
  computeEnvironmentName = "string",
  type = "MANAGED"|"UNMANAGED",
  state = "ENABLED"|"DISABLED",
  computeResources = list(
    type = "EC2"|"SPOT",
    minvCpus = 123,
    maxvCpus = 123,
    desiredvCpus = 123,
    instanceTypes = list(
      "string"
    ),
    imageId = "string",
    subnets = list(
      "string"
    ),
    securityGroupIds = list(
      "string"
    ),
    ec2KeyPair = "string",
    instanceRole = "string",
    tags = list(
      "string"
    ),
    bidPercentage = 123,
    spotIamFleetRole = "string"
  ),
  serviceRole = "string"
)
}
}

\examples{
# This example creates a managed compute environment with specific C4
# instance types that are launched on demand. The compute environment is
# called C4OnDemand.
\donttest{create_compute_environment(
  type = "MANAGED",
  computeEnvironmentName = "C4OnDemand",
  computeResources = list(
    type = "EC2",
    desiredvCpus = 48L,
    ec2KeyPair = "id_rsa",
    instanceRole = "ecsInstanceRole",
    instanceTypes = list(
      "c4.large",
      "c4.xlarge",
      "c4.2xlarge",
      "c4.4xlarge",
      "c4.8xlarge"
    ),
    maxvCpus = 128L,
    minvCpus = 0L,
    securityGroupIds = list(
      "sg-cf5093b2"
    ),
    subnets = list(
      "subnet-220c0e0a",
      "subnet-1a95556d",
      "subnet-978f6dce"
    ),
    tags = list(
      Name = "Batch Instance - C4OnDemand"
    )
  ),
  serviceRole = "arn:aws:iam::012345678910:role/AWSBatchServiceRole",
  state = "ENABLED"
)}

# This example creates a managed compute environment with the M4 instance
# type that is launched when the Spot bid price is at or below 20\% of the
# On-Demand price for the instance type. The compute environment is called
# M4Spot.
\donttest{create_compute_environment(
  type = "MANAGED",
  computeEnvironmentName = "M4Spot",
  computeResources = list(
    type = "SPOT",
    bidPercentage = 20L,
    desiredvCpus = 4L,
    ec2KeyPair = "id_rsa",
    instanceRole = "ecsInstanceRole",
    instanceTypes = list(
      "m4"
    ),
    maxvCpus = 128L,
    minvCpus = 0L,
    securityGroupIds = list(
      "sg-cf5093b2"
    ),
    spotIamFleetRole = "arn:aws:iam::012345678910:role/aws-ec2-spot-fleet-role",
    subnets = list(
      "subnet-220c0e0a",
      "subnet-1a95556d",
      "subnet-978f6dce"
    ),
    tags = list(
      Name = "Batch Instance - M4Spot"
    )
  ),
  serviceRole = "arn:aws:iam::012345678910:role/AWSBatchServiceRole",
  state = "ENABLED"
)}

}
