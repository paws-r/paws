% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ec2_operations.R
\name{ec2_create_client_vpn_endpoint}
\alias{ec2_create_client_vpn_endpoint}
\title{Creates a Client VPN endpoint}
\usage{
ec2_create_client_vpn_endpoint(ClientCidrBlock, ServerCertificateArn,
  AuthenticationOptions, ConnectionLogOptions, DnsServers,
  TransportProtocol, Description, DryRun, ClientToken, TagSpecifications)
}
\arguments{
\item{ClientCidrBlock}{[required] The IPv4 address range, in CIDR notation, from which to assign client IP
addresses. The address range cannot overlap with the local CIDR of the
VPC in which the associated subnet is located, or the routes that you
add manually. The address range cannot be changed after the Client VPN
endpoint has been created. The CIDR block should be /22 or greater.}

\item{ServerCertificateArn}{[required] The ARN of the server certificate. For more information, see the \href{https://docs.aws.amazon.com/acm/latest/userguide/}{AWS Certificate Manager User Guide}.}

\item{AuthenticationOptions}{[required] Information about the authentication method to be used to authenticate
clients.}

\item{ConnectionLogOptions}{[required] Information about the client connection logging options.

If you enable client connection logging, data about client connections
is sent to a Cloudwatch Logs log stream. The following information is
logged:
\itemize{
\item Client connection requests
\item Client connection results (successful and unsuccessful)
\item Reasons for unsuccessful client connection requests
\item Client connection termination time
}}

\item{DnsServers}{Information about the DNS servers to be used for DNS resolution. A
Client VPN endpoint can have up to two DNS servers. If no DNS server is
specified, the DNS address of the VPC that is to be associated with
Client VPN endpoint is used as the DNS server.}

\item{TransportProtocol}{The transport protocol to be used by the VPN session.

Default value: \code{udp}}

\item{Description}{A brief description of the Client VPN endpoint.}

\item{DryRun}{Checks whether you have the required permissions for the action, without
actually making the request, and provides an error response. If you have
the required permissions, the error response is \code{DryRunOperation}.
Otherwise, it is \code{UnauthorizedOperation}.}

\item{ClientToken}{Unique, case-sensitive identifier you provide to ensure the idempotency
of the request. For more information, see \href{https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html}{How to Ensure Idempotency}.}

\item{TagSpecifications}{The tags to apply to the Client VPN endpoint during creation.}
}
\description{
Creates a Client VPN endpoint. A Client VPN endpoint is the resource you
create and configure to enable and manage client VPN sessions. It is the
destination endpoint at which all client VPN sessions are terminated.
}
\section{Request syntax}{
\preformatted{ec2$create_client_vpn_endpoint(
  ClientCidrBlock = "string",
  ServerCertificateArn = "string",
  AuthenticationOptions = list(
    list(
      Type = "certificate-authentication"|"directory-service-authentication",
      ActiveDirectory = list(
        DirectoryId = "string"
      ),
      MutualAuthentication = list(
        ClientRootCertificateChainArn = "string"
      )
    )
  ),
  ConnectionLogOptions = list(
    Enabled = TRUE|FALSE,
    CloudwatchLogGroup = "string",
    CloudwatchLogStream = "string"
  ),
  DnsServers = list(
    "string"
  ),
  TransportProtocol = "tcp"|"udp",
  Description = "string",
  DryRun = TRUE|FALSE,
  ClientToken = "string",
  TagSpecifications = list(
    list(
      ResourceType = "client-vpn-endpoint"|"customer-gateway"|"dedicated-host"|"dhcp-options"|"elastic-ip"|"fleet"|"fpga-image"|"host-reservation"|"image"|"instance"|"internet-gateway"|"launch-template"|"natgateway"|"network-acl"|"network-interface"|"reserved-instances"|"route-table"|"security-group"|"snapshot"|"spot-instances-request"|"subnet"|"transit-gateway"|"transit-gateway-attachment"|"transit-gateway-route-table"|"volume"|"vpc"|"vpc-peering-connection"|"vpn-connection"|"vpn-gateway",
      Tags = list(
        list(
          Key = "string",
          Value = "string"
        )
      )
    )
  )
)
}
}

\keyword{internal}
