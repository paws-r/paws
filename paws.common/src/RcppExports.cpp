// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// paws_url_encoder
CharacterVector paws_url_encoder(CharacterVector urls, CharacterVector safe);
RcppExport SEXP _paws_common_paws_url_encoder(SEXP urlsSEXP, SEXP safeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type urls(urlsSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type safe(safeSEXP);
    rcpp_result_gen = Rcpp::wrap(paws_url_encoder(urls, safe));
    return rcpp_result_gen;
END_RCPP
}
// json_convert_string
CharacterVector json_convert_string(CharacterVector x);
RcppExport SEXP _paws_common_json_convert_string(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(json_convert_string(x));
    return rcpp_result_gen;
END_RCPP
}
// check_global
LogicalVector check_global(List endpoint);
RcppExport SEXP _paws_common_check_global(SEXP endpointSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type endpoint(endpointSEXP);
    rcpp_result_gen = Rcpp::wrap(check_global(endpoint));
    return rcpp_result_gen;
END_RCPP
}
// endpoint_unescape
std::string endpoint_unescape(std::string endpoint, const std::string& region);
RcppExport SEXP _paws_common_endpoint_unescape(SEXP endpointSEXP, SEXP regionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type endpoint(endpointSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type region(regionSEXP);
    rcpp_result_gen = Rcpp::wrap(endpoint_unescape(endpoint, region));
    return rcpp_result_gen;
END_RCPP
}
// get_region_pattern
std::string get_region_pattern(CharacterVector region_pattern, const std::string& region);
RcppExport SEXP _paws_common_get_region_pattern(SEXP region_patternSEXP, SEXP regionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type region_pattern(region_patternSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type region(regionSEXP);
    rcpp_result_gen = Rcpp::wrap(get_region_pattern(region_pattern, region));
    return rcpp_result_gen;
END_RCPP
}
// char_sort
CharacterVector char_sort(CharacterVector str);
RcppExport SEXP _paws_common_char_sort(SEXP strSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type str(strSEXP);
    rcpp_result_gen = Rcpp::wrap(char_sort(str));
    return rcpp_result_gen;
END_RCPP
}
// uuid_v4
CharacterVector uuid_v4(size_t n);
RcppExport SEXP _paws_common_uuid_v4(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< size_t >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(uuid_v4(n));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_paws_common_paws_url_encoder", (DL_FUNC) &_paws_common_paws_url_encoder, 2},
    {"_paws_common_json_convert_string", (DL_FUNC) &_paws_common_json_convert_string, 1},
    {"_paws_common_check_global", (DL_FUNC) &_paws_common_check_global, 1},
    {"_paws_common_endpoint_unescape", (DL_FUNC) &_paws_common_endpoint_unescape, 2},
    {"_paws_common_get_region_pattern", (DL_FUNC) &_paws_common_get_region_pattern, 2},
    {"_paws_common_char_sort", (DL_FUNC) &_paws_common_char_sort, 1},
    {"_paws_common_uuid_v4", (DL_FUNC) &_paws_common_uuid_v4, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_paws_common(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
