% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/networkfirewall_operations.R
\name{networkfirewall_update_rule_group}
\alias{networkfirewall_update_rule_group}
\title{Updates the rule settings for the specified rule group}
\usage{
networkfirewall_update_rule_group(UpdateToken, RuleGroupArn,
  RuleGroupName, RuleGroup, Rules, Type, Description, DryRun)
}
\arguments{
\item{UpdateToken}{[required] A token used for optimistic locking. Network Firewall returns a token to
your requests that access the rule group. The token marks the state of
the rule group resource at the time of the request.

To make changes to the rule group, you provide the token in your
request. Network Firewall uses the token to ensure that the rule group
hasn't changed since you last retrieved it. If it has changed, the
operation fails with an \code{InvalidTokenException}. If this happens,
retrieve the rule group again to get a current copy of it with a current
token. Reapply your changes as needed, then try the operation again
using the new token.}

\item{RuleGroupArn}{The Amazon Resource Name (ARN) of the rule group.

You must specify the ARN or the name, and you can specify both.}

\item{RuleGroupName}{The descriptive name of the rule group. You can't change the name of a
rule group after you create it.

You must specify the ARN or the name, and you can specify both.}

\item{RuleGroup}{An object that defines the rule group rules.

You must provide either this rule group setting or a \code{Rules} setting,
but not both.}

\item{Rules}{The name of a file containing stateful rule group rules specifications
in Suricata flat format, with one rule per line. Use this to import your
existing Suricata compatible rule groups.

You must provide either this rules setting or a populated \code{RuleGroup}
setting, but not both.

You can provide your rule group specification in a file through this
setting when you create or update your rule group. The call response
returns a RuleGroup object that Network Firewall has populated from your
file. Network Firewall uses the file contents to populate the rule group
rules, but does not maintain a reference to the file or use the file in
any way after performing the create or update. If you call
\code{\link[=networkfirewall_describe_rule_group]{describe_rule_group}} to retrieve
the rule group, Network Firewall returns rules settings inside a
RuleGroup object.}

\item{Type}{Indicates whether the rule group is stateless or stateful. If the rule
group is stateless, it contains stateless rules. If it is stateful, it
contains stateful rules.

This setting is required for requests that do not include the
\code{RuleGroupARN}.}

\item{Description}{A description of the rule group.}

\item{DryRun}{Indicates whether you want Network Firewall to just check the validity
of the request, rather than run the request.

If set to \code{TRUE}, Network Firewall checks whether the request can run
successfully, but doesn't actually make the requested changes. The call
returns the value that the request would return if you ran it with dry
run set to \code{FALSE}, but doesn't make additions or changes to your
resources. This option allows you to make sure that you have the
required permissions to run the request and that your request parameters
are valid.

If set to \code{FALSE}, Network Firewall makes the requested changes to your
resources.}
}
\description{
Updates the rule settings for the specified rule group. You use a rule
group by reference in one or more firewall policies. When you modify a
rule group, you modify all firewall policies that use the rule group.

To update a rule group, first call
\code{\link[=networkfirewall_describe_rule_group]{describe_rule_group}} to retrieve
the current RuleGroup object, update the object as needed, and then
provide the updated object to this call.
}
\section{Request syntax}{
\preformatted{svc$update_rule_group(
  UpdateToken = "string",
  RuleGroupArn = "string",
  RuleGroupName = "string",
  RuleGroup = list(
    RuleVariables = list(
      IPSets = list(
        list(
          Definition = list(
            "string"
          )
        )
      ),
      PortSets = list(
        list(
          Definition = list(
            "string"
          )
        )
      )
    ),
    RulesSource = list(
      RulesString = "string",
      RulesSourceList = list(
        Targets = list(
          "string"
        ),
        TargetTypes = list(
          "TLS_SNI"|"HTTP_HOST"
        ),
        GeneratedRulesType = "ALLOWLIST"|"DENYLIST"
      ),
      StatefulRules = list(
        list(
          Action = "PASS"|"DROP"|"ALERT",
          Header = list(
            Protocol = "IP"|"TCP"|"UDP"|"ICMP"|"HTTP"|"FTP"|"TLS"|"SMB"|"DNS"|"DCERPC"|"SSH"|"SMTP"|"IMAP"|"MSN"|"KRB5"|"IKEV2"|"TFTP"|"NTP"|"DHCP",
            Source = "string",
            SourcePort = "string",
            Direction = "FORWARD"|"ANY",
            Destination = "string",
            DestinationPort = "string"
          ),
          RuleOptions = list(
            list(
              Keyword = "string",
              Settings = list(
                "string"
              )
            )
          )
        )
      ),
      StatelessRulesAndCustomActions = list(
        StatelessRules = list(
          list(
            RuleDefinition = list(
              MatchAttributes = list(
                Sources = list(
                  list(
                    AddressDefinition = "string"
                  )
                ),
                Destinations = list(
                  list(
                    AddressDefinition = "string"
                  )
                ),
                SourcePorts = list(
                  list(
                    FromPort = 123,
                    ToPort = 123
                  )
                ),
                DestinationPorts = list(
                  list(
                    FromPort = 123,
                    ToPort = 123
                  )
                ),
                Protocols = list(
                  123
                ),
                TCPFlags = list(
                  list(
                    Flags = list(
                      "FIN"|"SYN"|"RST"|"PSH"|"ACK"|"URG"|"ECE"|"CWR"
                    ),
                    Masks = list(
                      "FIN"|"SYN"|"RST"|"PSH"|"ACK"|"URG"|"ECE"|"CWR"
                    )
                  )
                )
              ),
              Actions = list(
                "string"
              )
            ),
            Priority = 123
          )
        ),
        CustomActions = list(
          list(
            ActionName = "string",
            ActionDefinition = list(
              PublishMetricAction = list(
                Dimensions = list(
                  list(
                    Value = "string"
                  )
                )
              )
            )
          )
        )
      )
    )
  ),
  Rules = "string",
  Type = "STATELESS"|"STATEFUL",
  Description = "string",
  DryRun = TRUE|FALSE
)
}
}

\keyword{internal}
