% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/gamelift_operations.R
\name{gamelift_search_game_sessions}
\alias{gamelift_search_game_sessions}
\title{Retrieves all active game sessions that match a set of search criteria
and sorts them in a specified order}
\usage{
gamelift_search_game_sessions(FleetId, AliasId, FilterExpression,
  SortExpression, Limit, NextToken)
}
\arguments{
\item{FleetId}{A unique identifier for a fleet to search for active game sessions. You
can use either the fleet ID or ARN value. Each request must reference
either a fleet ID or alias ID, but not both.}

\item{AliasId}{A unique identifier for an alias associated with the fleet to search for
active game sessions. You can use either the alias ID or ARN value. Each
request must reference either a fleet ID or alias ID, but not both.}

\item{FilterExpression}{String containing the search criteria for the session search. If no
filter expression is included, the request returns results for all game
sessions in the fleet that are in \code{ACTIVE} status.

A filter expression can contain one or multiple conditions. Each
condition consists of the following:
\itemize{
\item \strong{Operand} \\-- Name of a game session attribute. Valid values are
\code{gameSessionName}, \code{gameSessionId}, \code{gameSessionProperties},
\code{maximumSessions}, \code{creationTimeMillis}, \code{playerSessionCount},
\code{hasAvailablePlayerSessions}.
\item \strong{Comparator} \\-- Valid comparators are: \code{=}, \verb{&lt;&gt;}, \verb{&lt;},
\verb{&gt;}, \verb{&lt;=}, \verb{&gt;=}.
\item \strong{Value} \\-- Value to be searched for. Values may be numbers,
boolean values (true/false) or strings depending on the operand.
String values are case sensitive and must be enclosed in single
quotes. Special characters must be escaped. Boolean and string
values can only be used with the comparators \code{=} and \verb{&lt;&gt;}. For
example, the following filter expression searches on
\code{gameSessionName}:
\"\verb{FilterExpression\\": \\"gameSessionName = \\'Matt\\\\\\'s Awesome Game 1\\'\\"}.
}

To chain multiple conditions in a single expression, use the logical
keywords \code{AND}, \code{OR}, and \code{NOT} and parentheses as needed. For example:
\verb{x AND y AND NOT z}, \verb{NOT (x OR y)}.

Session search evaluates conditions from left to right using the
following precedence rules:
\enumerate{
\item \code{=}, \verb{&lt;&gt;}, \verb{&lt;}, \verb{&gt;}, \verb{&lt;=}, \verb{&gt;=}
\item Parentheses
\item NOT
\item AND
\item OR
}

For example, this filter expression retrieves game sessions hosting at
least ten players that have an open player slot:
\code{"maximumSessions&gt;=10 AND hasAvailablePlayerSessions=true"}.}

\item{SortExpression}{Instructions on how to sort the search results. If no sort expression is
included, the request returns results in random order. A sort expression
consists of the following elements:
\itemize{
\item \strong{Operand} \\-- Name of a game session attribute. Valid values are
\code{gameSessionName}, \code{gameSessionId}, \code{gameSessionProperties},
\code{maximumSessions}, \code{creationTimeMillis}, \code{playerSessionCount},
\code{hasAvailablePlayerSessions}.
\item \strong{Order} \\-- Valid sort orders are \code{ASC} (ascending) and \code{DESC}
(descending).
}

For example, this sort expression returns the oldest active sessions
first: \code{"SortExpression": "creationTimeMillis ASC"}. Results with a null
value for the sort operand are returned at the end of the list.}

\item{Limit}{The maximum number of results to return. Use this parameter with
\code{NextToken} to get results as a set of sequential pages. The maximum
number of results returned is 20, even if this value is not set or is
set higher than 20.}

\item{NextToken}{Token that indicates the start of the next sequential page of results.
Use the token that is returned with a previous call to this action. To
start at the beginning of the result set, do not specify a value.}
}
\description{
Retrieves all active game sessions that match a set of search criteria
and sorts them in a specified order. You can search or sort by the
following game session attributes:
}
\details{
\itemize{
\item \strong{gameSessionId} \\-- A unique identifier for the game session. You
can use either a \code{GameSessionId} or \code{GameSessionArn} value.
\item \strong{gameSessionName} \\-- Name assigned to a game session. This value
is set when requesting a new game session with CreateGameSession or
updating with UpdateGameSession. Game session names do not need to
be unique to a game session.
\item \strong{gameSessionProperties} \\-- Custom data defined in a game
session\'s \code{GameProperty} parameter. \code{GameProperty} values are
stored as key:value pairs; the filter expression must indicate the
key and a string to search the data values for. For example, to
search for game sessions with custom data containing the key:value
pair \"gameMode:brawl\", specify the following:
\code{gameSessionProperties.gameMode = "brawl"}. All custom data values
are searched as strings.
\item \strong{maximumSessions} \\-- Maximum number of player sessions allowed
for a game session. This value is set when requesting a new game
session with CreateGameSession or updating with UpdateGameSession.
\item \strong{creationTimeMillis} \\-- Value indicating when a game session was
created. It is expressed in Unix time as milliseconds.
\item \strong{playerSessionCount} \\-- Number of players currently connected to
a game session. This value changes rapidly as players join the
session or drop out.
\item \strong{hasAvailablePlayerSessions} \\-- Boolean value indicating whether
a game session has reached its maximum number of players. It is
highly recommended that all search requests include this filter
attribute to optimize search performance and return only sessions
that players can join.
}

Returned values for \code{playerSessionCount} and
\code{hasAvailablePlayerSessions} change quickly as players join sessions and
others drop out. Results should be considered a snapshot in time. Be
sure to refresh search results often, and handle sessions that fill up
before a player can join.

To search or sort, specify either a fleet ID or an alias ID, and provide
a search filter expression, a sort expression, or both. If successful, a
collection of GameSession objects matching the request is returned. Use
the pagination parameters to retrieve results as a set of sequential
pages.

You can search for game sessions one fleet at a time only. To find game
sessions across multiple fleets, you must search each fleet separately
and combine the results. This search feature finds only game sessions
that are in \code{ACTIVE} status. To locate games in statuses other than
active, use DescribeGameSessionDetails.
\itemize{
\item CreateGameSession
\item DescribeGameSessions
\item DescribeGameSessionDetails
\item SearchGameSessions
\item UpdateGameSession
\item GetGameSessionLogUrl
\item Game session placements
\itemize{
\item StartGameSessionPlacement
\item DescribeGameSessionPlacement
\item StopGameSessionPlacement
}
}
}
\section{Request syntax}{
\preformatted{svc$search_game_sessions(
  FleetId = "string",
  AliasId = "string",
  FilterExpression = "string",
  SortExpression = "string",
  Limit = 123,
  NextToken = "string"
)
}
}

\keyword{internal}
