% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/kendra_operations.R
\name{kendra_query}
\alias{kendra_query}
\title{Searches an active index}
\usage{
kendra_query(IndexId, QueryText, AttributeFilter, Facets,
  RequestedDocumentAttributes, QueryResultTypeFilter, PageNumber,
  PageSize, SortingConfiguration, UserContext, VisitorId)
}
\arguments{
\item{IndexId}{[required] The unique identifier of the index to search. The identifier is returned
in the response from the operation.}

\item{QueryText}{[required] The text to search for.}

\item{AttributeFilter}{Enables filtered searches based on document attributes. You can only
provide one attribute filter; however, the \code{AndAllFilters}, \code{NotFilter},
and \code{OrAllFilters} parameters contain a list of other filters.

The \code{AttributeFilter} parameter enables you to create a set of filtering
rules that a document must satisfy to be included in the query results.}

\item{Facets}{An array of documents attributes. Amazon Kendra returns a count for each
attribute key specified. You can use this information to help narrow the
search for your user.}

\item{RequestedDocumentAttributes}{An array of document attributes to include in the response. No other
document attributes are included in the response. By default all
document attributes are included in the response.}

\item{QueryResultTypeFilter}{Sets the type of query. Only results for the specified query type are
returned.}

\item{PageNumber}{Query results are returned in pages the size of the \code{PageSize}
parameter. By default, Amazon Kendra returns the first page of results.
Use this parameter to get result pages after the first one.}

\item{PageSize}{Sets the number of results that are returned in each page of results.
The default page size is 10. The maximum number of results returned is
100. If you ask for more than 100 results, only 100 are returned.}

\item{SortingConfiguration}{Provides information that determines how the results of the query are
sorted. You can set the field that Amazon Kendra should sort the results
on, and specify whether the results should be sorted in ascending or
descending order. In the case of ties in sorting the results, the
results are sorted by relevance.

If you don't provide sorting configuration, the results are sorted by
the relevance that Amazon Kendra determines for the result.}

\item{UserContext}{The user context token.}

\item{VisitorId}{Provides an identifier for a specific user. The \code{VisitorId} should be a
unique identifier, such as a GUID. Don't use personally identifiable
information, such as the user's email address, as the \code{VisitorId}.}
}
\description{
Searches an active index. Use this API to search your documents using
query. The \code{\link[=kendra_query]{query}} operation enables to do faceted
search and to filter results based on document attributes.

It also enables you to provide user context that Amazon Kendra uses to
enforce document access control in the search results.

Amazon Kendra searches your index for text content and question and
answer (FAQ) content. By default the response contains three types of
results.
\itemize{
\item Relevant passages
\item Matching FAQs
\item Relevant documents
}

You can specify that the query return only one type of result using the
\code{QueryResultTypeConfig} parameter.

Each query returns the 100 most relevant results.
}
\section{Request syntax}{
\preformatted{svc$query(
  IndexId = "string",
  QueryText = "string",
  AttributeFilter = list(
    AndAllFilters = list(
      list()
    ),
    OrAllFilters = list(
      list()
    ),
    NotFilter = list(),
    EqualsTo = list(
      Key = "string",
      Value = list(
        StringValue = "string",
        StringListValue = list(
          "string"
        ),
        LongValue = 123,
        DateValue = as.POSIXct(
          "2015-01-01"
        )
      )
    ),
    ContainsAll = list(
      Key = "string",
      Value = list(
        StringValue = "string",
        StringListValue = list(
          "string"
        ),
        LongValue = 123,
        DateValue = as.POSIXct(
          "2015-01-01"
        )
      )
    ),
    ContainsAny = list(
      Key = "string",
      Value = list(
        StringValue = "string",
        StringListValue = list(
          "string"
        ),
        LongValue = 123,
        DateValue = as.POSIXct(
          "2015-01-01"
        )
      )
    ),
    GreaterThan = list(
      Key = "string",
      Value = list(
        StringValue = "string",
        StringListValue = list(
          "string"
        ),
        LongValue = 123,
        DateValue = as.POSIXct(
          "2015-01-01"
        )
      )
    ),
    GreaterThanOrEquals = list(
      Key = "string",
      Value = list(
        StringValue = "string",
        StringListValue = list(
          "string"
        ),
        LongValue = 123,
        DateValue = as.POSIXct(
          "2015-01-01"
        )
      )
    ),
    LessThan = list(
      Key = "string",
      Value = list(
        StringValue = "string",
        StringListValue = list(
          "string"
        ),
        LongValue = 123,
        DateValue = as.POSIXct(
          "2015-01-01"
        )
      )
    ),
    LessThanOrEquals = list(
      Key = "string",
      Value = list(
        StringValue = "string",
        StringListValue = list(
          "string"
        ),
        LongValue = 123,
        DateValue = as.POSIXct(
          "2015-01-01"
        )
      )
    )
  ),
  Facets = list(
    list(
      DocumentAttributeKey = "string"
    )
  ),
  RequestedDocumentAttributes = list(
    "string"
  ),
  QueryResultTypeFilter = "DOCUMENT"|"QUESTION_ANSWER"|"ANSWER",
  PageNumber = 123,
  PageSize = 123,
  SortingConfiguration = list(
    DocumentAttributeKey = "string",
    SortOrder = "DESC"|"ASC"
  ),
  UserContext = list(
    Token = "string"
  ),
  VisitorId = "string"
)
}
}

\keyword{internal}
