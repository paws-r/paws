% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/iotevents_operations.R
\name{iotevents_create_detector_model}
\alias{iotevents_create_detector_model}
\title{Creates a detector model}
\usage{
iotevents_create_detector_model(detectorModelName,
  detectorModelDefinition, detectorModelDescription, key, roleArn, tags)
}
\arguments{
\item{detectorModelName}{[required] The name of the detector model.}

\item{detectorModelDefinition}{[required] Information that defines how the detectors operate.}

\item{detectorModelDescription}{A brief description of the detector model.}

\item{key}{The input attribute key used to identify a device or system in order to
create a detector (an instance of the detector model) and then to route
each input received to the appropriate detector (instance). This
parameter uses a JSON-path expression to specify the attribute-value
pair in the message payload of each input that is used to identify the
device associated with the input.}

\item{roleArn}{[required] The ARN of the role that grants permission to AWS IoT Events to perform
its operations.}

\item{tags}{Metadata which can be used to manage the detector model.}
}
\description{
Creates a detector model.
}
\section{Request syntax}{
\preformatted{svc$create_detector_model(
  detectorModelName = "string",
  detectorModelDefinition = list(
    states = list(
      list(
        stateName = "string",
        onInput = list(
          events = list(
            list(
              eventName = "string",
              condition = "string",
              actions = list(
                list(
                  setVariable = list(
                    variableName = "string",
                    value = "string"
                  ),
                  sns = list(
                    targetArn = "string"
                  ),
                  iotTopicPublish = list(
                    mqttTopic = "string"
                  ),
                  setTimer = list(
                    timerName = "string",
                    seconds = 123
                  ),
                  clearTimer = list(
                    timerName = "string"
                  ),
                  resetTimer = list(
                    timerName = "string"
                  )
                )
              )
            )
          ),
          transitionEvents = list(
            list(
              eventName = "string",
              condition = "string",
              actions = list(
                list(
                  setVariable = list(
                    variableName = "string",
                    value = "string"
                  ),
                  sns = list(
                    targetArn = "string"
                  ),
                  iotTopicPublish = list(
                    mqttTopic = "string"
                  ),
                  setTimer = list(
                    timerName = "string",
                    seconds = 123
                  ),
                  clearTimer = list(
                    timerName = "string"
                  ),
                  resetTimer = list(
                    timerName = "string"
                  )
                )
              ),
              nextState = "string"
            )
          )
        ),
        onEnter = list(
          events = list(
            list(
              eventName = "string",
              condition = "string",
              actions = list(
                list(
                  setVariable = list(
                    variableName = "string",
                    value = "string"
                  ),
                  sns = list(
                    targetArn = "string"
                  ),
                  iotTopicPublish = list(
                    mqttTopic = "string"
                  ),
                  setTimer = list(
                    timerName = "string",
                    seconds = 123
                  ),
                  clearTimer = list(
                    timerName = "string"
                  ),
                  resetTimer = list(
                    timerName = "string"
                  )
                )
              )
            )
          )
        ),
        onExit = list(
          events = list(
            list(
              eventName = "string",
              condition = "string",
              actions = list(
                list(
                  setVariable = list(
                    variableName = "string",
                    value = "string"
                  ),
                  sns = list(
                    targetArn = "string"
                  ),
                  iotTopicPublish = list(
                    mqttTopic = "string"
                  ),
                  setTimer = list(
                    timerName = "string",
                    seconds = 123
                  ),
                  clearTimer = list(
                    timerName = "string"
                  ),
                  resetTimer = list(
                    timerName = "string"
                  )
                )
              )
            )
          )
        )
      )
    ),
    initialStateName = "string"
  ),
  detectorModelDescription = "string",
  key = "string",
  roleArn = "string",
  tags = list(
    list(
      key = "string",
      value = "string"
    )
  )
)
}
}

\keyword{internal}
