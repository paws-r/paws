% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/codeartifact_operations.R
\name{codeartifact_get_authorization_token}
\alias{codeartifact_get_authorization_token}
\title{Generates a temporary authentication token for accessing repositories in
the domain}
\usage{
codeartifact_get_authorization_token(domain, domainOwner,
  durationSeconds)
}
\arguments{
\item{domain}{[required] The name of the domain that is in scope for the generated authorization
token.}

\item{domainOwner}{The 12-digit account number of the AWS account that owns the domain. It
does not include dashes or spaces.}

\item{durationSeconds}{The time, in seconds, that the generated authorization token is valid.}
}
\description{
Generates a temporary authentication token for accessing repositories in
the domain. This API requires the \code{codeartifact:GetAuthorizationToken}
and \code{sts:GetServiceBearerToken} permissions.
}
\details{
CodeArtifact authorization tokens are valid for a period of 12 hours
when created with the \code{login} command. You can call \code{login} periodically
to refresh the token. When you create an authorization token with the
\code{GetAuthorizationToken} API, you can set a custom authorization period,
up to a maximum of 12 hours, with the \code{durationSeconds} parameter.

The authorization period begins after \code{login} or \code{GetAuthorizationToken}
is called. If \code{login} or \code{GetAuthorizationToken} is called while
assuming a role, the token lifetime is independent of the maximum
session duration of the role. For example, if you call \verb{sts assume-role}
and specify a session duration of 15 minutes, then generate a
CodeArtifact authorization token, the token will be valid for the full
authorization period even though this is longer than the 15-minute
session duration.

See \href{https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html}{Using IAM Roles}
for more information on controlling session duration.
}
\section{Request syntax}{
\preformatted{svc$get_authorization_token(
  domain = "string",
  domainOwner = "string",
  durationSeconds = 123
)
}
}

\keyword{internal}
