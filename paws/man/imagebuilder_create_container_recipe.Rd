% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/imagebuilder_operations.R
\name{imagebuilder_create_container_recipe}
\alias{imagebuilder_create_container_recipe}
\title{Creates a new container recipe}
\usage{
imagebuilder_create_container_recipe(containerType, name, description,
  semanticVersion, components, dockerfileTemplateData,
  dockerfileTemplateUri, platformOverride, imageOsVersionOverride,
  parentImage, tags, workingDirectory, targetRepository, kmsKeyId,
  clientToken)
}
\arguments{
\item{containerType}{[required] The type of container to create.}

\item{name}{[required] The name of the container recipe.}

\item{description}{The description of the container recipe.}

\item{semanticVersion}{[required] The semantic version of the container recipe
(<major>.<minor>.<patch>).}

\item{components}{[required] Components for build and test that are included in the container recipe.}

\item{dockerfileTemplateData}{[required] The Dockerfile template used to build your image as an inline data blob.}

\item{dockerfileTemplateUri}{The S3 URI for the Dockerfile that will be used to build your container
image.}

\item{platformOverride}{Specifies the operating system platform when you use a custom source
image.}

\item{imageOsVersionOverride}{Specifies the operating system version for the source image.}

\item{parentImage}{[required] The source image for the container recipe.}

\item{tags}{Tags that are attached to the container recipe.}

\item{workingDirectory}{The working directory for use during build and test workflows.}

\item{targetRepository}{[required] The destination repository for the container image.}

\item{kmsKeyId}{Identifies which KMS key is used to encrypt the container image.}

\item{clientToken}{[required] The client token used to make this request idempotent.}
}
\description{
Creates a new container recipe. Container recipes define how images are
configured, tested, and assessed.
}
\section{Request syntax}{
\preformatted{svc$create_container_recipe(
  containerType = "DOCKER",
  name = "string",
  description = "string",
  semanticVersion = "string",
  components = list(
    list(
      componentArn = "string"
    )
  ),
  dockerfileTemplateData = "string",
  dockerfileTemplateUri = "string",
  platformOverride = "Windows"|"Linux",
  imageOsVersionOverride = "string",
  parentImage = "string",
  tags = list(
    "string"
  ),
  workingDirectory = "string",
  targetRepository = list(
    service = "ECR",
    repositoryName = "string"
  ),
  kmsKeyId = "string",
  clientToken = "string"
)
}
}

\keyword{internal}
