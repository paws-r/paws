% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/iotjobsdataplane_operations.R
\name{iotjobsdataplane_start_next_pending_job_execution}
\alias{iotjobsdataplane_start_next_pending_job_execution}
\title{Gets and starts the next pending (status IN_PROGRESS or QUEUED) job
execution for a thing}
\usage{
iotjobsdataplane_start_next_pending_job_execution(thingName,
  statusDetails, stepTimeoutInMinutes)
}
\arguments{
\item{thingName}{[required] The name of the thing associated with the device.}

\item{statusDetails}{A collection of name/value pairs that describe the status of the job
execution. If not specified, the statusDetails are unchanged.}

\item{stepTimeoutInMinutes}{Specifies the amount of time this device has to finish execution of this
job. If the job execution status is not set to a terminal state before
this timer expires, or before the timer is reset (by calling
\code{UpdateJobExecution}, setting the status to \code{IN_PROGRESS} and specifying
a new timeout value in field \code{stepTimeoutInMinutes}) the job execution
status will be automatically set to \code{TIMED_OUT}. Note that setting this
timeout has no effect on that job execution timeout which may have been
specified when the job was created (\code{CreateJob} using field
\code{timeoutConfig}).}
}
\description{
Gets and starts the next pending (status IN\\_PROGRESS or QUEUED) job
execution for a thing.
}
\section{Request syntax}{
\preformatted{svc$start_next_pending_job_execution(
  thingName = "string",
  statusDetails = list(
    "string"
  ),
  stepTimeoutInMinutes = 123
)
}
}

\keyword{internal}
