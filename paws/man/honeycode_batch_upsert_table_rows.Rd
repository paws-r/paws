% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/honeycode_operations.R
\name{honeycode_batch_upsert_table_rows}
\alias{honeycode_batch_upsert_table_rows}
\title{The BatchUpsertTableRows API allows you to upsert one or more rows in a
table}
\usage{
honeycode_batch_upsert_table_rows(workbookId, tableId, rowsToUpsert,
  clientRequestToken)
}
\arguments{
\item{workbookId}{[required] The ID of the workbook where the rows are being upserted.

If a workbook with the specified id could not be found, this API throws
ResourceNotFoundException.}

\item{tableId}{[required] The ID of the table where the rows are being upserted.

If a table with the specified id could not be found, this API throws
ResourceNotFoundException.}

\item{rowsToUpsert}{[required] The list of rows to upsert in the table. Each item in this list needs to
have a batch item id to uniquely identify the element in the request, a
filter expression to find the rows to update for that element and the
cell values to set for each column in the upserted rows. You need to
specify at least one item in this list.

Note that if one of the filter formulas in the request fails to evaluate
because of an error or one of the column ids in any of the rows does not
exist in the table, then the request fails and no updates are made to
the table.}

\item{clientRequestToken}{The request token for performing the update action. Request tokens help
to identify duplicate requests. If a call times out or fails due to a
transient error like a failed network connection, you can retry the call
with the same request token. The service ensures that if the first call
using that request token is successfully performed, the second call will
not perform the action again.

Note that request tokens are valid only for a few minutes. You cannot
use request tokens to dedupe requests spanning hours or days.}
}
\description{
The BatchUpsertTableRows API allows you to upsert one or more rows in a
table. The upsert operation takes a filter expression as input and
evaluates it to find matching rows on the destination table. If matching
rows are found, it will update the cells in the matching rows to new
values specified in the request. If no matching rows are found, a new
row is added at the end of the table and the cells in that row are set
to the new values specified in the request.

You can specify the values to set in some or all of the columns in the
table for the matching or newly appended rows. If a column is not
explicitly specified for a particular row, then that column will not be
updated for that row. To clear out the data in a specific cell, you need
to set the value as an empty string ("").
}
\section{Request syntax}{
\preformatted{svc$batch_upsert_table_rows(
  workbookId = "string",
  tableId = "string",
  rowsToUpsert = list(
    list(
      batchItemId = "string",
      filter = list(
        formula = "string",
        contextRowId = "string"
      ),
      cellsToUpdate = list(
        list(
          fact = "string"
        )
      )
    )
  ),
  clientRequestToken = "string"
)
}
}

\keyword{internal}
