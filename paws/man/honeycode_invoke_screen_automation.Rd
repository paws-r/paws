% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/honeycode_operations.R
\name{honeycode_invoke_screen_automation}
\alias{honeycode_invoke_screen_automation}
\title{The InvokeScreenAutomation API allows invoking an action defined in a
screen in a Honeycode app}
\usage{
honeycode_invoke_screen_automation(workbookId, appId, screenId,
  screenAutomationId, variables, rowId, clientRequestToken)
}
\arguments{
\item{workbookId}{[required] The ID of the workbook that contains the screen automation.}

\item{appId}{[required] The ID of the app that contains the screen automation.}

\item{screenId}{[required] The ID of the screen that contains the screen automation.}

\item{screenAutomationId}{[required] The ID of the automation action to be performed.}

\item{variables}{Variables are optional and are needed only if the screen requires them
to render correctly. Variables are specified as a map where the key is
the name of the variable as defined on the screen. The value is an
object which currently has only one property, rawValue, which holds the
value of the variable to be passed to the screen.}

\item{rowId}{The row ID for the automation if the automation is defined inside a
block with source or list.}

\item{clientRequestToken}{The request token for performing the automation action. Request tokens
help to identify duplicate requests. If a call times out or fails due to
a transient error like a failed network connection, you can retry the
call with the same request token. The service ensures that if the first
call using that request token is successfully performed, the second call
will return the response of the previous call rather than performing the
action again.

Note that request tokens are valid only for a few minutes. You cannot
use request tokens to dedupe requests spanning hours or days.}
}
\description{
The InvokeScreenAutomation API allows invoking an action defined in a
screen in a Honeycode app. The API allows setting local variables, which
can then be used in the automation being invoked. This allows automating
the Honeycode app interactions to write, update or delete data in the
workbook.
}
\section{Request syntax}{
\preformatted{svc$invoke_screen_automation(
  workbookId = "string",
  appId = "string",
  screenId = "string",
  screenAutomationId = "string",
  variables = list(
    list(
      rawValue = "string"
    )
  ),
  rowId = "string",
  clientRequestToken = "string"
)
}
}

\keyword{internal}
