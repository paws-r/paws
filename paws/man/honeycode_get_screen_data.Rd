% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/honeycode_operations.R
\name{honeycode_get_screen_data}
\alias{honeycode_get_screen_data}
\title{The GetScreenData API allows retrieval of data from a screen in a
Honeycode app}
\usage{
honeycode_get_screen_data(workbookId, appId, screenId, variables,
  maxResults, nextToken)
}
\arguments{
\item{workbookId}{[required] The ID of the workbook that contains the screen.}

\item{appId}{[required] The ID of the app that contains the screem.}

\item{screenId}{[required] The ID of the screen.}

\item{variables}{Variables are optional and are needed only if the screen requires them
to render correctly. Variables are specified as a map where the key is
the name of the variable as defined on the screen. The value is an
object which currently has only one property, rawValue, which holds the
value of the variable to be passed to the screen.}

\item{maxResults}{The number of results to be returned on a single page. Specify a number
between 1 and 100. The maximum value is 100.

This parameter is optional. If you don\'t specify this parameter, the
default page size is 100.}

\item{nextToken}{This parameter is optional. If a nextToken is not specified, the API
returns the first page of data.

Pagination tokens expire after 1 hour. If you use a token that was
returned more than an hour back, the API will throw ValidationException.}
}
\description{
The GetScreenData API allows retrieval of data from a screen in a
Honeycode app. The API allows setting local variables in the screen to
filter, sort or otherwise affect what will be displayed on the screen.
}
\section{Request syntax}{
\preformatted{svc$get_screen_data(
  workbookId = "string",
  appId = "string",
  screenId = "string",
  variables = list(
    list(
      rawValue = "string"
    )
  ),
  maxResults = 123,
  nextToken = "string"
)
}
}

\keyword{internal}
