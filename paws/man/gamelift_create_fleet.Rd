% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/gamelift_operations.R
\name{gamelift_create_fleet}
\alias{gamelift_create_fleet}
\title{Creates a new fleet to run your game servers}
\usage{
gamelift_create_fleet(Name, Description, BuildId, ScriptId,
  ServerLaunchPath, ServerLaunchParameters, LogPaths, EC2InstanceType,
  EC2InboundPermissions, NewGameSessionProtectionPolicy,
  RuntimeConfiguration, ResourceCreationLimitPolicy, MetricGroups,
  PeerVpcAwsAccountId, PeerVpcId, FleetType, InstanceRoleArn,
  CertificateConfiguration)
}
\arguments{
\item{Name}{[required] Descriptive label that is associated with a fleet. Fleet names do not
need to be unique.}

\item{Description}{Human-readable description of a fleet.}

\item{BuildId}{Unique identifier for a build to be deployed on the new fleet. The
custom game server build must have been successfully uploaded to Amazon
GameLift and be in a \code{READY} status. This fleet setting cannot be
changed once the fleet is created.}

\item{ScriptId}{Unique identifier for a Realtime script to be deployed on the new fleet.
The Realtime script must have been successfully uploaded to Amazon
GameLift. This fleet setting cannot be changed once the fleet is
created.}

\item{ServerLaunchPath}{This parameter is no longer used. Instead, specify a server launch path
using the \code{RuntimeConfiguration} parameter. (Requests that specify a
server launch path and launch parameters instead of a run-time
configuration will continue to work.)}

\item{ServerLaunchParameters}{This parameter is no longer used. Instead, specify server launch
parameters in the \code{RuntimeConfiguration} parameter. (Requests that
specify a server launch path and launch parameters instead of a run-time
configuration will continue to work.)}

\item{LogPaths}{This parameter is no longer used. Instead, to specify where Amazon
GameLift should store log files once a server process shuts down, use
the Amazon GameLift server API \code{ProcessReady()} and specify one or more
directory paths in \code{logParameters}. See more information in the \href{https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-sdk-server-api-ref.html#gamelift-sdk-server-api-ref-dataypes-process}{Server API Reference}.}

\item{EC2InstanceType}{[required] Name of an EC2 instance type that is supported in Amazon GameLift. A
fleet instance type determines the computing resources of each instance
in the fleet, including CPU, memory, storage, and networking capacity.
Amazon GameLift supports the following EC2 instance types. See \href{http://aws.amazon.com/ec2/instance-types/}{Amazon EC2 Instance Types} for
detailed descriptions.}

\item{EC2InboundPermissions}{Range of IP addresses and port settings that permit inbound traffic to
access game sessions that running on the fleet. For fleets using a
custom game build, this parameter is required before game sessions
running on the fleet can accept connections. For Realtime Servers
fleets, Amazon GameLift automatically sets TCP and UDP ranges for use by
the Realtime servers. You can specify multiple permission settings or
add more by updating the fleet.}

\item{NewGameSessionProtectionPolicy}{Game session protection policy to apply to all instances in this fleet.
If this parameter is not set, instances in this fleet default to no
protection. You can change a fleet\'s protection policy using
UpdateFleetAttributes, but this change will only affect sessions created
after the policy change. You can also set protection for individual
instances using UpdateGameSession.
\itemize{
\item \strong{NoProtection} \\-- The game session can be terminated during a
scale-down event.
\item \strong{FullProtection} \\-- If the game session is in an \code{ACTIVE} status,
it cannot be terminated during a scale-down event.
}}

\item{RuntimeConfiguration}{Instructions for launching server processes on each instance in the
fleet. Server processes run either a custom game build executable or a
Realtime Servers script. The run-time configuration lists the types of
server processes to run on an instance and includes the following
configuration settings: the server executable or launch script file,
launch parameters, and the number of processes to run concurrently on
each instance. A CreateFleet request must include a run-time
configuration with at least one server process configuration.}

\item{ResourceCreationLimitPolicy}{Policy that limits the number of game sessions an individual player can
create over a span of time for this fleet.}

\item{MetricGroups}{Name of an Amazon CloudWatch metric group to add this fleet to. A metric
group aggregates the metrics for all fleets in the group. Specify an
existing metric group name, or provide a new name to create a new metric
group. A fleet can only be included in one metric group at a time.}

\item{PeerVpcAwsAccountId}{Unique identifier for the AWS account with the VPC that you want to peer
your Amazon GameLift fleet with. You can find your Account ID in the AWS
Management Console under account settings.}

\item{PeerVpcId}{Unique identifier for a VPC with resources to be accessed by your Amazon
GameLift fleet. The VPC must be in the same region where your fleet is
deployed. Look up a VPC ID using the \href{https://console.aws.amazon.com/vpc/}{VPC Dashboard} in the AWS Management
Console. Learn more about VPC peering in \href{https://docs.aws.amazon.com/gamelift/latest/developerguide/vpc-peering.html}{VPC Peering with Amazon GameLift Fleets}.}

\item{FleetType}{Indicates whether to use on-demand instances or spot instances for this
fleet. If empty, the default is ON\\_DEMAND. Both categories of instances
use identical hardware and configurations based on the instance type
selected for this fleet. Learn more about \href{https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-ec2-instances.html#gamelift-ec2-instances-spot}{On-Demand versus Spot Instances}.}

\item{InstanceRoleArn}{Unique identifier for an AWS IAM role that manages access to your AWS
services. With an instance role ARN set, any application that runs on an
instance in this fleet can assume the role, including install scripts,
server processes, daemons (background processes). Create a role or look
up a role\'s ARN using the \href{https://console.aws.amazon.com/iam/}{IAM dashboard} in the AWS Management
Console. Learn more about using on-box credentials for your game servers
at \href{https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-sdk-server-resources.html}{Access external resources from a game server}.}

\item{CertificateConfiguration}{}
}
\description{
Creates a new fleet to run your game servers. whether they are custom
game builds or Realtime Servers with game-specific script. A fleet is a
set of Amazon Elastic Compute Cloud (Amazon EC2) instances, each of
which can host multiple game sessions. When creating a fleet, you choose
the hardware specifications, set some configuration options, and specify
the game server to deploy on the new fleet.
}
\details{
To create a new fleet, you must provide the following: (1) a fleet name,
(2) an EC2 instance type and fleet type (spot or on-demand), (3) the
build ID for your game build or script ID if using Realtime Servers, and
(4) a run-time configuration, which determines how game servers will run
on each instance in the fleet.

When creating a Realtime Servers fleet, we recommend using a minimal
version of the Realtime script (see this \href{https://docs.aws.amazon.com/gamelift/latest/developerguide/realtime-script.html#realtime-script-examples}{working code example}
). This will make it much easier to troubleshoot any fleet creation
issues. Once the fleet is active, you can update your Realtime script as
needed.

If the \code{CreateFleet} call is successful, Amazon GameLift performs the
following tasks. You can track the process of a fleet by checking the
fleet status or by monitoring fleet creation events:
\itemize{
\item Creates a fleet record. Status: \code{NEW}.
\item Begins writing events to the fleet event log, which can be accessed
in the Amazon GameLift console.

Sets the fleet\'s target capacity to 1 (desired instances), which
triggers Amazon GameLift to start one new EC2 instance.
\item Downloads the game build or Realtime script to the new instance and
installs it. Statuses: \code{DOWNLOADING}, \code{VALIDATING}, \code{BUILDING}.
\item Starts launching server processes on the instance. If the fleet is
configured to run multiple server processes per instance, Amazon
GameLift staggers each launch by a few seconds. Status:
\code{ACTIVATING}.
\item Sets the fleet\'s status to \code{ACTIVE} as soon as one server process
is ready to host a game session.
}

\strong{Learn more}

\href{https://docs.aws.amazon.com/gamelift/latest/developerguide/fleets-intro.html}{Working with Fleets}

\href{https://docs.aws.amazon.com/gamelift/latest/developerguide/fleets-creating-debug.html}{Debug Fleet Creation Issues}

\strong{Related operations}
\itemize{
\item CreateFleet
\item ListFleets
\item DeleteFleet
\item Describe fleets:
\itemize{
\item DescribeFleetAttributes
\item DescribeFleetCapacity
\item DescribeFleetPortSettings
\item DescribeFleetUtilization
\item DescribeRuntimeConfiguration
\item DescribeEC2InstanceLimits
\item DescribeFleetEvents
}
\item Update fleets:
\itemize{
\item UpdateFleetAttributes
\item UpdateFleetCapacity
\item UpdateFleetPortSettings
\item UpdateRuntimeConfiguration
}
\item Manage fleet actions:
\itemize{
\item StartFleetActions
\item StopFleetActions
}
}
}
\section{Request syntax}{
\preformatted{svc$create_fleet(
  Name = "string",
  Description = "string",
  BuildId = "string",
  ScriptId = "string",
  ServerLaunchPath = "string",
  ServerLaunchParameters = "string",
  LogPaths = list(
    "string"
  ),
  EC2InstanceType = "t2.micro"|"t2.small"|"t2.medium"|"t2.large"|"c3.large"|"c3.xlarge"|"c3.2xlarge"|"c3.4xlarge"|"c3.8xlarge"|"c4.large"|"c4.xlarge"|"c4.2xlarge"|"c4.4xlarge"|"c4.8xlarge"|"c5.large"|"c5.xlarge"|"c5.2xlarge"|"c5.4xlarge"|"c5.9xlarge"|"c5.12xlarge"|"c5.18xlarge"|"c5.24xlarge"|"r3.large"|"r3.xlarge"|"r3.2xlarge"|"r3.4xlarge"|"r3.8xlarge"|"r4.large"|"r4.xlarge"|"r4.2xlarge"|"r4.4xlarge"|"r4.8xlarge"|"r4.16xlarge"|"r5.large"|"r5.xlarge"|"r5.2xlarge"|"r5.4xlarge"|"r5.8xlarge"|"r5.12xlarge"|"r5.16xlarge"|"r5.24xlarge"|"m3.medium"|"m3.large"|"m3.xlarge"|"m3.2xlarge"|"m4.large"|"m4.xlarge"|"m4.2xlarge"|"m4.4xlarge"|"m4.10xlarge"|"m5.large"|"m5.xlarge"|"m5.2xlarge"|"m5.4xlarge"|"m5.8xlarge"|"m5.12xlarge"|"m5.16xlarge"|"m5.24xlarge",
  EC2InboundPermissions = list(
    list(
      FromPort = 123,
      ToPort = 123,
      IpRange = "string",
      Protocol = "TCP"|"UDP"
    )
  ),
  NewGameSessionProtectionPolicy = "NoProtection"|"FullProtection",
  RuntimeConfiguration = list(
    ServerProcesses = list(
      list(
        LaunchPath = "string",
        Parameters = "string",
        ConcurrentExecutions = 123
      )
    ),
    MaxConcurrentGameSessionActivations = 123,
    GameSessionActivationTimeoutSeconds = 123
  ),
  ResourceCreationLimitPolicy = list(
    NewGameSessionsPerCreator = 123,
    PolicyPeriodInMinutes = 123
  ),
  MetricGroups = list(
    "string"
  ),
  PeerVpcAwsAccountId = "string",
  PeerVpcId = "string",
  FleetType = "ON_DEMAND"|"SPOT",
  InstanceRoleArn = "string",
  CertificateConfiguration = list(
    CertificateType = "DISABLED"|"GENERATED"
  )
)
}
}

\keyword{internal}
