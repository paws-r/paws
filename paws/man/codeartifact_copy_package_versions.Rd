% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/codeartifact_operations.R
\name{codeartifact_copy_package_versions}
\alias{codeartifact_copy_package_versions}
\title{Copies package versions from one repository to another repository in the
same domain}
\usage{
codeartifact_copy_package_versions(domain, domainOwner,
  sourceRepository, destinationRepository, format, namespace, package,
  versions, versionRevisions, allowOverwrite, includeFromUpstream)
}
\arguments{
\item{domain}{[required] The name of the domain that contains the source and destination
repositories.}

\item{domainOwner}{The 12-digit account number of the AWS account that owns the domain. It
does not include dashes or spaces.}

\item{sourceRepository}{[required] The name of the repository that contains the package versions to copy.}

\item{destinationRepository}{[required] The name of the repository into which package versions are copied.}

\item{format}{[required] The format of the package that is copied. The valid package types are:
\itemize{
\item \code{npm}: A Node Package Manager (npm) package.
\item \code{pypi}: A Python Package Index (PyPI) package.
\item \code{maven}: A Maven package that contains compiled code in a
distributable format, such as a JAR file.
\item \code{nuget}: A NuGet package.
}}

\item{namespace}{The namespace of the package. The package component that specifies its
namespace depends on its type. For example:
\itemize{
\item The namespace of a Maven package is its \code{groupId}.
\item The namespace of an npm package is its \code{scope}.
\item A Python package does not contain a corresponding component, so
Python packages do not have a namespace.
\item A NuGet package does not contain a corresponding component, so NuGet
packages do not have a namespace.
}}

\item{package}{[required] The name of the package that is copied.}

\item{versions}{The versions of the package to copy.

You must specify \code{versions} or \code{versionRevisions}. You cannot specify
both.}

\item{versionRevisions}{A list of key-value pairs. The keys are package versions and the values
are package version revisions. A \code{CopyPackageVersion} operation succeeds
if the specified versions in the source repository match the specified
package version revision.

You must specify \code{versions} or \code{versionRevisions}. You cannot specify
both.}

\item{allowOverwrite}{Set to true to overwrite a package version that already exists in the
destination repository. If set to false and the package version already
exists in the destination repository, the package version is returned in
the \code{failedVersions} field of the response with an \code{ALREADY_EXISTS}
error code.}

\item{includeFromUpstream}{Set to true to copy packages from repositories that are upstream from
the source repository to the destination repository. The default setting
is false. For more information, see \href{https://docs.aws.amazon.com/codeartifact/latest/ug/repos-upstream.html}{Working with upstream repositories}.}
}
\description{
Copies package versions from one repository to another repository in the
same domain.

You must specify \code{versions} or \code{versionRevisions}. You cannot specify
both.
}
\section{Request syntax}{
\preformatted{svc$copy_package_versions(
  domain = "string",
  domainOwner = "string",
  sourceRepository = "string",
  destinationRepository = "string",
  format = "npm"|"pypi"|"maven"|"nuget",
  namespace = "string",
  package = "string",
  versions = list(
    "string"
  ),
  versionRevisions = list(
    "string"
  ),
  allowOverwrite = TRUE|FALSE,
  includeFromUpstream = TRUE|FALSE
)
}
}

\keyword{internal}
