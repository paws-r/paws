% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/appconfig_service.R
\name{appconfig}
\alias{appconfig}
\title{Amazon AppConfig}
\usage{
appconfig(config = list())
}
\arguments{
\item{config}{Optional configuration of credentials, endpoint, and/or region.}
}
\description{
AWS AppConfig

Use AWS AppConfig, a capability of AWS Systems Manager, to create,
manage, and quickly deploy application configurations. AppConfig
supports controlled deployments to applications of any size and includes
built-in validation checks and monitoring. You can use AppConfig with
applications hosted on Amazon EC2 instances, AWS Lambda, containers,
mobile applications, or IoT devices.

To prevent errors when deploying application configurations, especially
for production systems where a simple typo could cause an unexpected
outage, AppConfig includes validators. A validator provides a syntactic
or semantic check to ensure that the configuration you want to deploy
works as intended. To validate your application configuration data, you
provide a schema or a Lambda function that runs against the
configuration. The configuration deployment or update can only proceed
when the configuration data is valid.

During a configuration deployment, AppConfig monitors the application to
ensure that the deployment is successful. If the system encounters an
error, AppConfig rolls back the change to minimize impact for your
application users. You can configure a deployment strategy for each
application or environment that includes deployment criteria, including
velocity, bake time, and alarms to monitor. Similar to error monitoring,
if a deployment triggers an alarm, AppConfig automatically rolls back to
the previous version.

AppConfig supports multiple use cases. Here are some examples.
\itemize{
\item \strong{Application tuning}: Use AppConfig to carefully introduce changes
to your application that can only be tested with production traffic.
\item \strong{Feature toggle}: Use AppConfig to turn on new features that
require a timely deployment, such as a product launch or
announcement.
\item \strong{User membership}: Use AppConfig to allow premium subscribers to
access paid content.
\item \strong{Operational issues}: Use AppConfig to reduce stress on your
application when a dependency or other external factor impacts the
system.
}

This reference is intended to be used with the \href{http://docs.aws.amazon.com/systems-manager/latest/userguide/appconfig.html}{AWS AppConfig User Guide}.
}
\section{Service syntax}{
\preformatted{svc <- appconfig(
  config = list(
    credentials = list(
      creds = list(
        access_key_id = "string",
        secret_access_key = "string",
        session_token = "string"
      ),
      profile = "string"
    ),
    endpoint = "string",
    region = "string"
  )
)
}
}

\section{Operations}{

\tabular{ll}{
\link[=appconfig_create_application]{create_application} \tab An application in AppConfig is a logical unit of code that provides capabilities for your customers \cr
\link[=appconfig_create_configuration_profile]{create_configuration_profile} \tab Information that enables AppConfig to access the configuration source \cr
\link[=appconfig_create_deployment_strategy]{create_deployment_strategy} \tab A deployment strategy defines important criteria for rolling out your configuration to the designated targets\cr
\link[=appconfig_create_environment]{create_environment} \tab For each application, you define one or more environments \cr
\link[=appconfig_delete_application]{delete_application} \tab Delete an application \cr
\link[=appconfig_delete_configuration_profile]{delete_configuration_profile} \tab Delete a configuration profile \cr
\link[=appconfig_delete_deployment_strategy]{delete_deployment_strategy} \tab Delete a deployment strategy \cr
\link[=appconfig_delete_environment]{delete_environment} \tab Delete an environment \cr
\link[=appconfig_get_application]{get_application} \tab Retrieve information about an application \cr
\link[=appconfig_get_configuration]{get_configuration} \tab Retrieve information about a configuration \cr
\link[=appconfig_get_configuration_profile]{get_configuration_profile} \tab Retrieve information about a configuration profile \cr
\link[=appconfig_get_deployment]{get_deployment} \tab Retrieve information about a configuration deployment \cr
\link[=appconfig_get_deployment_strategy]{get_deployment_strategy} \tab Retrieve information about a deployment strategy \cr
\link[=appconfig_get_environment]{get_environment} \tab Retrieve information about an environment \cr
\link[=appconfig_list_applications]{list_applications} \tab List all applications in your AWS account \cr
\link[=appconfig_list_configuration_profiles]{list_configuration_profiles} \tab Lists the configuration profiles for an application \cr
\link[=appconfig_list_deployments]{list_deployments} \tab Lists the deployments for an environment \cr
\link[=appconfig_list_deployment_strategies]{list_deployment_strategies} \tab List deployment strategies \cr
\link[=appconfig_list_environments]{list_environments} \tab List the environments for an application \cr
\link[=appconfig_list_tags_for_resource]{list_tags_for_resource} \tab Retrieves the list of key-value tags assigned to the resource \cr
\link[=appconfig_start_deployment]{start_deployment} \tab Starts a deployment \cr
\link[=appconfig_stop_deployment]{stop_deployment} \tab Stops a deployment \cr
\link[=appconfig_tag_resource]{tag_resource} \tab Metadata to assign to an AppConfig resource \cr
\link[=appconfig_untag_resource]{untag_resource} \tab Deletes a tag key and value from an AppConfig resource \cr
\link[=appconfig_update_application]{update_application} \tab Updates an application \cr
\link[=appconfig_update_configuration_profile]{update_configuration_profile} \tab Updates a configuration profile \cr
\link[=appconfig_update_deployment_strategy]{update_deployment_strategy} \tab Updates a deployment strategy \cr
\link[=appconfig_update_environment]{update_environment} \tab Updates an environment \cr
\link[=appconfig_validate_configuration]{validate_configuration} \tab Uses the validators in a configuration profile to validate a configuration
}
}

\examples{
\dontrun{
svc <- appconfig()
svc$create_application(
  Foo = 123
)
}

}
