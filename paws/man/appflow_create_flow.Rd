% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/appflow_operations.R
\name{appflow_create_flow}
\alias{appflow_create_flow}
\title{Enables your application to create a new flow using Amazon AppFlow}
\usage{
appflow_create_flow(flowName, description, kmsArn, triggerConfig,
  sourceFlowConfig, destinationFlowConfigList, tasks, tags)
}
\arguments{
\item{flowName}{[required] The specified name of the flow. Spaces are not allowed. Use underscores
(\\_) or hyphens (-) only.}

\item{description}{A description of the flow you want to create.}

\item{kmsArn}{The ARN (Amazon Resource Name) of the Key Management Service (KMS) key
you provide for encryption. This is required if you do not want to use
the Amazon AppFlow-managed KMS key. If you don't provide anything here,
Amazon AppFlow uses the Amazon AppFlow-managed KMS key.}

\item{triggerConfig}{[required] The trigger settings that determine how and when the flow runs.}

\item{sourceFlowConfig}{[required] The configuration that controls how Amazon AppFlow retrieves data from
the source connector.}

\item{destinationFlowConfigList}{[required] The configuration that controls how Amazon AppFlow places data in the
destination connector.}

\item{tasks}{[required] A list of tasks that Amazon AppFlow performs while transferring the data
in the flow run.}

\item{tags}{The tags used to organize, track, or control access for your flow.}
}
\description{
Enables your application to create a new flow using Amazon AppFlow. You
must create a connector profile before calling this API. Please note
that the Request Syntax below shows syntax for multiple destinations,
however, you can only transfer data to one item in this list at a time.
Amazon AppFlow does not currently support flows to multiple destinations
at once.
}
\section{Request syntax}{
\preformatted{svc$create_flow(
  flowName = "string",
  description = "string",
  kmsArn = "string",
  triggerConfig = list(
    triggerType = "Scheduled"|"Event"|"OnDemand",
    triggerProperties = list(
      Scheduled = list(
        scheduleExpression = "string",
        dataPullMode = "Incremental"|"Complete",
        scheduleStartTime = as.POSIXct(
          "2015-01-01"
        ),
        scheduleEndTime = as.POSIXct(
          "2015-01-01"
        ),
        timezone = "string"
      )
    )
  ),
  sourceFlowConfig = list(
    connectorType = "Salesforce"|"Singular"|"Slack"|"Redshift"|"S3"|"Marketo"|"Googleanalytics"|"Zendesk"|"Servicenow"|"Datadog"|"Trendmicro"|"Snowflake"|"Dynatrace"|"Infornexus"|"Amplitude"|"Veeva"|"EventBridge"|"Upsolver",
    connectorProfileName = "string",
    sourceConnectorProperties = list(
      Amplitude = list(
        object = "string"
      ),
      Datadog = list(
        object = "string"
      ),
      Dynatrace = list(
        object = "string"
      ),
      GoogleAnalytics = list(
        object = "string"
      ),
      InforNexus = list(
        object = "string"
      ),
      Marketo = list(
        object = "string"
      ),
      S3 = list(
        bucketName = "string",
        bucketPrefix = "string"
      ),
      Salesforce = list(
        object = "string",
        enableDynamicFieldUpdate = TRUE|FALSE,
        includeDeletedRecords = TRUE|FALSE
      ),
      ServiceNow = list(
        object = "string"
      ),
      Singular = list(
        object = "string"
      ),
      Slack = list(
        object = "string"
      ),
      Trendmicro = list(
        object = "string"
      ),
      Veeva = list(
        object = "string"
      ),
      Zendesk = list(
        object = "string"
      )
    ),
    incrementalPullConfig = list(
      datetimeTypeFieldName = "string"
    )
  ),
  destinationFlowConfigList = list(
    list(
      connectorType = "Salesforce"|"Singular"|"Slack"|"Redshift"|"S3"|"Marketo"|"Googleanalytics"|"Zendesk"|"Servicenow"|"Datadog"|"Trendmicro"|"Snowflake"|"Dynatrace"|"Infornexus"|"Amplitude"|"Veeva"|"EventBridge"|"Upsolver",
      connectorProfileName = "string",
      destinationConnectorProperties = list(
        Redshift = list(
          object = "string",
          intermediateBucketName = "string",
          bucketPrefix = "string",
          errorHandlingConfig = list(
            failOnFirstDestinationError = TRUE|FALSE,
            bucketPrefix = "string",
            bucketName = "string"
          )
        ),
        S3 = list(
          bucketName = "string",
          bucketPrefix = "string",
          s3OutputFormatConfig = list(
            fileType = "CSV"|"JSON"|"PARQUET",
            prefixConfig = list(
              prefixType = "FILENAME"|"PATH"|"PATH_AND_FILENAME",
              prefixFormat = "YEAR"|"MONTH"|"DAY"|"HOUR"|"MINUTE"
            ),
            aggregationConfig = list(
              aggregationType = "None"|"SingleFile"
            )
          )
        ),
        Salesforce = list(
          object = "string",
          idFieldNames = list(
            "string"
          ),
          errorHandlingConfig = list(
            failOnFirstDestinationError = TRUE|FALSE,
            bucketPrefix = "string",
            bucketName = "string"
          ),
          writeOperationType = "INSERT"|"UPSERT"|"UPDATE"
        ),
        Snowflake = list(
          object = "string",
          intermediateBucketName = "string",
          bucketPrefix = "string",
          errorHandlingConfig = list(
            failOnFirstDestinationError = TRUE|FALSE,
            bucketPrefix = "string",
            bucketName = "string"
          )
        ),
        EventBridge = list(
          object = "string",
          errorHandlingConfig = list(
            failOnFirstDestinationError = TRUE|FALSE,
            bucketPrefix = "string",
            bucketName = "string"
          )
        ),
        Upsolver = list(
          bucketName = "string",
          bucketPrefix = "string",
          s3OutputFormatConfig = list(
            fileType = "CSV"|"JSON"|"PARQUET",
            prefixConfig = list(
              prefixType = "FILENAME"|"PATH"|"PATH_AND_FILENAME",
              prefixFormat = "YEAR"|"MONTH"|"DAY"|"HOUR"|"MINUTE"
            ),
            aggregationConfig = list(
              aggregationType = "None"|"SingleFile"
            )
          )
        )
      )
    )
  ),
  tasks = list(
    list(
      sourceFields = list(
        "string"
      ),
      connectorOperator = list(
        Amplitude = "BETWEEN",
        Datadog = "PROJECTION"|"BETWEEN"|"EQUAL_TO"|"ADDITION"|"MULTIPLICATION"|"DIVISION"|"SUBTRACTION"|"MASK_ALL"|"MASK_FIRST_N"|"MASK_LAST_N"|"VALIDATE_NON_NULL"|"VALIDATE_NON_ZERO"|"VALIDATE_NON_NEGATIVE"|"VALIDATE_NUMERIC"|"NO_OP",
        Dynatrace = "PROJECTION"|"BETWEEN"|"EQUAL_TO"|"ADDITION"|"MULTIPLICATION"|"DIVISION"|"SUBTRACTION"|"MASK_ALL"|"MASK_FIRST_N"|"MASK_LAST_N"|"VALIDATE_NON_NULL"|"VALIDATE_NON_ZERO"|"VALIDATE_NON_NEGATIVE"|"VALIDATE_NUMERIC"|"NO_OP",
        GoogleAnalytics = "PROJECTION"|"BETWEEN",
        InforNexus = "PROJECTION"|"BETWEEN"|"EQUAL_TO"|"ADDITION"|"MULTIPLICATION"|"DIVISION"|"SUBTRACTION"|"MASK_ALL"|"MASK_FIRST_N"|"MASK_LAST_N"|"VALIDATE_NON_NULL"|"VALIDATE_NON_ZERO"|"VALIDATE_NON_NEGATIVE"|"VALIDATE_NUMERIC"|"NO_OP",
        Marketo = "PROJECTION"|"LESS_THAN"|"GREATER_THAN"|"BETWEEN"|"ADDITION"|"MULTIPLICATION"|"DIVISION"|"SUBTRACTION"|"MASK_ALL"|"MASK_FIRST_N"|"MASK_LAST_N"|"VALIDATE_NON_NULL"|"VALIDATE_NON_ZERO"|"VALIDATE_NON_NEGATIVE"|"VALIDATE_NUMERIC"|"NO_OP",
        S3 = "PROJECTION"|"LESS_THAN"|"GREATER_THAN"|"BETWEEN"|"LESS_THAN_OR_EQUAL_TO"|"GREATER_THAN_OR_EQUAL_TO"|"EQUAL_TO"|"NOT_EQUAL_TO"|"ADDITION"|"MULTIPLICATION"|"DIVISION"|"SUBTRACTION"|"MASK_ALL"|"MASK_FIRST_N"|"MASK_LAST_N"|"VALIDATE_NON_NULL"|"VALIDATE_NON_ZERO"|"VALIDATE_NON_NEGATIVE"|"VALIDATE_NUMERIC"|"NO_OP",
        Salesforce = "PROJECTION"|"LESS_THAN"|"CONTAINS"|"GREATER_THAN"|"BETWEEN"|"LESS_THAN_OR_EQUAL_TO"|"GREATER_THAN_OR_EQUAL_TO"|"EQUAL_TO"|"NOT_EQUAL_TO"|"ADDITION"|"MULTIPLICATION"|"DIVISION"|"SUBTRACTION"|"MASK_ALL"|"MASK_FIRST_N"|"MASK_LAST_N"|"VALIDATE_NON_NULL"|"VALIDATE_NON_ZERO"|"VALIDATE_NON_NEGATIVE"|"VALIDATE_NUMERIC"|"NO_OP",
        ServiceNow = "PROJECTION"|"CONTAINS"|"LESS_THAN"|"GREATER_THAN"|"BETWEEN"|"LESS_THAN_OR_EQUAL_TO"|"GREATER_THAN_OR_EQUAL_TO"|"EQUAL_TO"|"NOT_EQUAL_TO"|"ADDITION"|"MULTIPLICATION"|"DIVISION"|"SUBTRACTION"|"MASK_ALL"|"MASK_FIRST_N"|"MASK_LAST_N"|"VALIDATE_NON_NULL"|"VALIDATE_NON_ZERO"|"VALIDATE_NON_NEGATIVE"|"VALIDATE_NUMERIC"|"NO_OP",
        Singular = "PROJECTION"|"EQUAL_TO"|"ADDITION"|"MULTIPLICATION"|"DIVISION"|"SUBTRACTION"|"MASK_ALL"|"MASK_FIRST_N"|"MASK_LAST_N"|"VALIDATE_NON_NULL"|"VALIDATE_NON_ZERO"|"VALIDATE_NON_NEGATIVE"|"VALIDATE_NUMERIC"|"NO_OP",
        Slack = "PROJECTION"|"LESS_THAN"|"GREATER_THAN"|"BETWEEN"|"LESS_THAN_OR_EQUAL_TO"|"GREATER_THAN_OR_EQUAL_TO"|"EQUAL_TO"|"ADDITION"|"MULTIPLICATION"|"DIVISION"|"SUBTRACTION"|"MASK_ALL"|"MASK_FIRST_N"|"MASK_LAST_N"|"VALIDATE_NON_NULL"|"VALIDATE_NON_ZERO"|"VALIDATE_NON_NEGATIVE"|"VALIDATE_NUMERIC"|"NO_OP",
        Trendmicro = "PROJECTION"|"EQUAL_TO"|"ADDITION"|"MULTIPLICATION"|"DIVISION"|"SUBTRACTION"|"MASK_ALL"|"MASK_FIRST_N"|"MASK_LAST_N"|"VALIDATE_NON_NULL"|"VALIDATE_NON_ZERO"|"VALIDATE_NON_NEGATIVE"|"VALIDATE_NUMERIC"|"NO_OP",
        Veeva = "PROJECTION"|"LESS_THAN"|"GREATER_THAN"|"CONTAINS"|"BETWEEN"|"LESS_THAN_OR_EQUAL_TO"|"GREATER_THAN_OR_EQUAL_TO"|"EQUAL_TO"|"NOT_EQUAL_TO"|"ADDITION"|"MULTIPLICATION"|"DIVISION"|"SUBTRACTION"|"MASK_ALL"|"MASK_FIRST_N"|"MASK_LAST_N"|"VALIDATE_NON_NULL"|"VALIDATE_NON_ZERO"|"VALIDATE_NON_NEGATIVE"|"VALIDATE_NUMERIC"|"NO_OP",
        Zendesk = "PROJECTION"|"GREATER_THAN"|"ADDITION"|"MULTIPLICATION"|"DIVISION"|"SUBTRACTION"|"MASK_ALL"|"MASK_FIRST_N"|"MASK_LAST_N"|"VALIDATE_NON_NULL"|"VALIDATE_NON_ZERO"|"VALIDATE_NON_NEGATIVE"|"VALIDATE_NUMERIC"|"NO_OP"
      ),
      destinationField = "string",
      taskType = "Arithmetic"|"Filter"|"Map"|"Mask"|"Merge"|"Truncate"|"Validate",
      taskProperties = list(
        "string"
      )
    )
  ),
  tags = list(
    "string"
  )
)
}
}

\keyword{internal}
