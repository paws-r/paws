% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/servicecatalog_operations.R
\name{servicecatalog_describe_provisioning_parameters}
\alias{servicecatalog_describe_provisioning_parameters}
\title{Gets information about the configuration required to provision the
specified product using the specified provisioning artifact}
\usage{
servicecatalog_describe_provisioning_parameters(AcceptLanguage,
  ProductId, ProvisioningArtifactId, PathId)
}
\arguments{
\item{AcceptLanguage}{The language code.
\itemize{
\item \code{en} - English (default)
\item \code{jp} - Japanese
\item \code{zh} - Chinese
}}

\item{ProductId}{[required] The product identifier.}

\item{ProvisioningArtifactId}{[required] The identifier of the provisioning artifact.}

\item{PathId}{The path identifier of the product. This value is optional if the
product has a default path, and required if the product has more than
one path. To list the paths for a product, use ListLaunchPaths.}
}
\description{
Gets information about the configuration required to provision the
specified product using the specified provisioning artifact.
}
\details{
If the output contains a TagOption key with an empty list of values,
there is a TagOption conflict for that key. The end user cannot take
action to fix the conflict, and launch is not blocked. In subsequent
calls to ProvisionProduct, do not include conflicted TagOption keys as
tags, or this causes the error \"Parameter validation failed: Missing
required parameter in Tags[\emph{N}]:\emph{Value}\". Tag the provisioned product
with the value \code{sc-tagoption-conflict-portfolioId-productId}.
}
\section{Request syntax}{
\preformatted{svc$describe_provisioning_parameters(
  AcceptLanguage = "string",
  ProductId = "string",
  ProvisioningArtifactId = "string",
  PathId = "string"
)
}
}

\keyword{internal}
