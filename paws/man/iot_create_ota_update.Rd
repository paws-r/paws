% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/iot_operations.R
\name{iot_create_ota_update}
\alias{iot_create_ota_update}
\title{Creates an AWS IoT OTAUpdate on a target group of things or groups}
\usage{
iot_create_ota_update(otaUpdateId, description, targets, protocols,
  targetSelection, awsJobExecutionsRolloutConfig,
  awsJobPresignedUrlConfig, files, roleArn, additionalParameters, tags)
}
\arguments{
\item{otaUpdateId}{[required] The ID of the OTA update to be created.}

\item{description}{The description of the OTA update.}

\item{targets}{[required] The targeted devices to receive OTA updates.}

\item{protocols}{The protocol used to transfer the OTA update image. Valid values are
[HTTP], [MQTT], [HTTP, MQTT]. When both HTTP and MQTT are
specified, the target device can choose the protocol.}

\item{targetSelection}{Specifies whether the update will continue to run (CONTINUOUS), or will
be complete after all the things specified as targets have completed the
update (SNAPSHOT). If continuous, the update may also be run on a thing
when a change is detected in a target. For example, an update will run
on a thing when the thing is added to a target group, even after the
update was completed by all things originally in the group. Valid
values: CONTINUOUS \\| SNAPSHOT.}

\item{awsJobExecutionsRolloutConfig}{Configuration for the rollout of OTA updates.}

\item{awsJobPresignedUrlConfig}{Configuration information for pre-signed URLs.}

\item{files}{[required] The files to be streamed by the OTA update.}

\item{roleArn}{[required] The IAM role that allows access to the AWS IoT Jobs service.}

\item{additionalParameters}{A list of additional OTA update parameters which are name-value pairs.}

\item{tags}{Metadata which can be used to manage updates.}
}
\description{
Creates an AWS IoT OTAUpdate on a target group of things or groups.
}
\section{Request syntax}{
\preformatted{svc$create_ota_update(
  otaUpdateId = "string",
  description = "string",
  targets = list(
    "string"
  ),
  protocols = list(
    "MQTT"|"HTTP"
  ),
  targetSelection = "CONTINUOUS"|"SNAPSHOT",
  awsJobExecutionsRolloutConfig = list(
    maximumPerMinute = 123
  ),
  awsJobPresignedUrlConfig = list(
    expiresInSec = 123
  ),
  files = list(
    list(
      fileName = "string",
      fileVersion = "string",
      fileLocation = list(
        stream = list(
          streamId = "string",
          fileId = 123
        ),
        s3Location = list(
          bucket = "string",
          key = "string",
          version = "string"
        )
      ),
      codeSigning = list(
        awsSignerJobId = "string",
        startSigningJobParameter = list(
          signingProfileParameter = list(
            certificateArn = "string",
            platform = "string",
            certificatePathOnDevice = "string"
          ),
          signingProfileName = "string",
          destination = list(
            s3Destination = list(
              bucket = "string",
              prefix = "string"
            )
          )
        ),
        customCodeSigning = list(
          signature = list(
            inlineDocument = raw
          ),
          certificateChain = list(
            certificateName = "string",
            inlineDocument = "string"
          ),
          hashAlgorithm = "string",
          signatureAlgorithm = "string"
        )
      ),
      attributes = list(
        "string"
      )
    )
  ),
  roleArn = "string",
  additionalParameters = list(
    "string"
  ),
  tags = list(
    list(
      Key = "string",
      Value = "string"
    )
  )
)
}
}

\keyword{internal}
