% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/appsync_service.R
\name{appsync}
\alias{appsync}
\title{AWS AppSync}
\usage{
appsync(config = list())
}
\arguments{
\item{config}{Optional configuration of credentials, endpoint, and/or region.}
}
\description{
AWS AppSync provides API actions for creating and interacting with data
sources using GraphQL from your application.
}
\section{Service syntax}{
\preformatted{svc <- appsync(
  config = list(
    credentials = list(
      creds = list(
        access_key_id = "string",
        secret_access_key = "string",
        session_token = "string"
      ),
      profile = "string"
    ),
    endpoint = "string",
    region = "string"
  )
)
}
}

\section{Operations}{

\tabular{ll}{
\link[=appsync_create_api_cache]{create_api_cache} \tab Creates a cache for the GraphQL API \cr
\link[=appsync_create_api_key]{create_api_key} \tab Creates a unique key that you can distribute to clients who are executing your API\cr
\link[=appsync_create_data_source]{create_data_source} \tab Creates a DataSource object \cr
\link[=appsync_create_function]{create_function} \tab Creates a Function object \cr
\link[=appsync_create_graphql_api]{create_graphql_api} \tab Creates a GraphqlApi object \cr
\link[=appsync_create_resolver]{create_resolver} \tab Creates a Resolver object \cr
\link[=appsync_create_type]{create_type} \tab Creates a Type object \cr
\link[=appsync_delete_api_cache]{delete_api_cache} \tab Deletes an ApiCache object \cr
\link[=appsync_delete_api_key]{delete_api_key} \tab Deletes an API key \cr
\link[=appsync_delete_data_source]{delete_data_source} \tab Deletes a DataSource object \cr
\link[=appsync_delete_function]{delete_function} \tab Deletes a Function \cr
\link[=appsync_delete_graphql_api]{delete_graphql_api} \tab Deletes a GraphqlApi object \cr
\link[=appsync_delete_resolver]{delete_resolver} \tab Deletes a Resolver object \cr
\link[=appsync_delete_type]{delete_type} \tab Deletes a Type object \cr
\link[=appsync_flush_api_cache]{flush_api_cache} \tab Flushes an ApiCache object \cr
\link[=appsync_get_api_cache]{get_api_cache} \tab Retrieves an ApiCache object \cr
\link[=appsync_get_data_source]{get_data_source} \tab Retrieves a DataSource object \cr
\link[=appsync_get_function]{get_function} \tab Get a Function \cr
\link[=appsync_get_graphql_api]{get_graphql_api} \tab Retrieves a GraphqlApi object \cr
\link[=appsync_get_introspection_schema]{get_introspection_schema} \tab Retrieves the introspection schema for a GraphQL API \cr
\link[=appsync_get_resolver]{get_resolver} \tab Retrieves a Resolver object \cr
\link[=appsync_get_schema_creation_status]{get_schema_creation_status} \tab Retrieves the current status of a schema creation operation \cr
\link[=appsync_get_type]{get_type} \tab Retrieves a Type object \cr
\link[=appsync_list_api_keys]{list_api_keys} \tab Lists the API keys for a given API \cr
\link[=appsync_list_data_sources]{list_data_sources} \tab Lists the data sources for a given API \cr
\link[=appsync_list_functions]{list_functions} \tab List multiple functions \cr
\link[=appsync_list_graphql_apis]{list_graphql_apis} \tab Lists your GraphQL APIs \cr
\link[=appsync_list_resolvers]{list_resolvers} \tab Lists the resolvers for a given API and type \cr
\link[=appsync_list_resolvers_by_function]{list_resolvers_by_function} \tab List the resolvers that are associated with a specific function \cr
\link[=appsync_list_tags_for_resource]{list_tags_for_resource} \tab Lists the tags for a resource \cr
\link[=appsync_list_types]{list_types} \tab Lists the types for a given API \cr
\link[=appsync_start_schema_creation]{start_schema_creation} \tab Adds a new schema to your GraphQL API \cr
\link[=appsync_tag_resource]{tag_resource} \tab Tags a resource with user-supplied tags \cr
\link[=appsync_untag_resource]{untag_resource} \tab Untags a resource \cr
\link[=appsync_update_api_cache]{update_api_cache} \tab Updates the cache for the GraphQL API \cr
\link[=appsync_update_api_key]{update_api_key} \tab Updates an API key \cr
\link[=appsync_update_data_source]{update_data_source} \tab Updates a DataSource object \cr
\link[=appsync_update_function]{update_function} \tab Updates a Function object \cr
\link[=appsync_update_graphql_api]{update_graphql_api} \tab Updates a GraphqlApi object \cr
\link[=appsync_update_resolver]{update_resolver} \tab Updates a Resolver object \cr
\link[=appsync_update_type]{update_type} \tab Updates a Type object
}
}

\examples{
\donttest{svc <- appsync()
svc$create_api_cache(
  Foo = 123
)}

}
