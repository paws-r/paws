% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/lookoutforvision_operations.R
\name{lookoutforvision_create_model}
\alias{lookoutforvision_create_model}
\title{Creates a new version of a model within an an Amazon Lookout for Vision
project}
\usage{
lookoutforvision_create_model(ProjectName, Description, ClientToken,
  OutputConfig, KmsKeyId)
}
\arguments{
\item{ProjectName}{[required] The name of the project in which you want to create a model version.}

\item{Description}{A description for the version of the model.}

\item{ClientToken}{ClientToken is an idempotency token that ensures a call to \code{CreateModel}
completes only once. You choose the value to pass. For example, An
issue, such as an network outage, might prevent you from getting a
response from \code{CreateModel}. In this case, safely retry your call to
\code{CreateModel} by using the same \code{ClientToken} parameter value. An error
occurs if the other input parameters are not the same as in the first
request. Using a different value for \code{ClientToken} is considered a new
call to \code{CreateModel}. An idempotency token is active for 8 hours.}

\item{OutputConfig}{[required] The location where Amazon Lookout for Vision saves the training results.}

\item{KmsKeyId}{The identifier of the AWS Key Management Service (AWS KMS) customer
master key (CMK) to use for encypting the model. If this parameter is
not specified, the model is encrypted by a key that AWS owns and
manages.}
}
\description{
Creates a new version of a model within an an Amazon Lookout for Vision
project. \code{CreateModel} is an asynchronous operation in which Amazon
Lookout for Vision trains, tests, and evaluates a new version of a
model.

To get the current status, check the \code{Status} field returned in the
response from DescribeModel.

If the project has a single dataset, Amazon Lookout for Vision
internally splits the dataset to create a training and a test dataset.
If the project has a training and a test dataset, Lookout for Vision
uses the respective datasets to train and test the model.

After training completes, the evaluation metrics are stored at the
location specified in \code{OutputConfig}.
}
\section{Request syntax}{
\preformatted{svc$create_model(
  ProjectName = "string",
  Description = list(
    ModelVersion = "string",
    ModelArn = "string",
    CreationTimestamp = as.POSIXct(
      "2015-01-01"
    ),
    Description = "string",
    Status = "TRAINING"|"TRAINED"|"TRAINING_FAILED"|"STARTING_HOSTING"|"HOSTED"|"HOSTING_FAILED"|"STOPPING_HOSTING"|"SYSTEM_UPDATING"|"DELETING",
    StatusMessage = "string",
    Performance = list(
      F1Score = 123.0,
      Recall = 123.0,
      Precision = 123.0
    ),
    OutputConfig = list(
      S3Location = list(
        Bucket = "string",
        Prefix = "string"
      )
    ),
    EvaluationManifest = list(
      Bucket = "string",
      Key = "string"
    ),
    EvaluationResult = list(
      Bucket = "string",
      Key = "string"
    ),
    EvaluationEndTimestamp = as.POSIXct(
      "2015-01-01"
    ),
    KmsKeyId = "string"
  ),
  ClientToken = "string",
  OutputConfig = list(
    S3Location = list(
      Bucket = "string",
      Prefix = "string"
    )
  ),
  KmsKeyId = "string"
)
}
}

\keyword{internal}
