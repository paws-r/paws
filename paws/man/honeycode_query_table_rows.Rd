% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/honeycode_operations.R
\name{honeycode_query_table_rows}
\alias{honeycode_query_table_rows}
\title{The QueryTableRows API allows you to use a filter formula to query for
specific rows in a table}
\usage{
honeycode_query_table_rows(workbookId, tableId, filterFormula,
  maxResults, nextToken)
}
\arguments{
\item{workbookId}{[required] The ID of the workbook whose table rows are being queried.

If a workbook with the specified id could not be found, this API throws
ResourceNotFoundException.}

\item{tableId}{[required] The ID of the table whose rows are being queried.

If a table with the specified id could not be found, this API throws
ResourceNotFoundException.}

\item{filterFormula}{[required] An object that represents a filter formula along with the id of the
context row under which the filter function needs to evaluate.}

\item{maxResults}{The maximum number of rows to return in each page of the results.}

\item{nextToken}{This parameter is optional. If a nextToken is not specified, the API
returns the first page of data.

Pagination tokens expire after 1 hour. If you use a token that was
returned more than an hour back, the API will throw ValidationException.}
}
\description{
The QueryTableRows API allows you to use a filter formula to query for
specific rows in a table.
}
\section{Request syntax}{
\preformatted{svc$query_table_rows(
  workbookId = "string",
  tableId = "string",
  filterFormula = list(
    formula = "string",
    contextRowId = "string"
  ),
  maxResults = 123,
  nextToken = "string"
)
}
}

\keyword{internal}
