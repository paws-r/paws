% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/kinesisvideo_service.R
\name{kinesisvideo}
\alias{kinesisvideo}
\title{Amazon Kinesis Video Streams}
\usage{
kinesisvideo(config = NULL)
}
\arguments{
\item{config}{An optional list of custom configurations for the service. Currently
supports adding custom credentials, endpoint, and region.}
}
\description{
Amazon Kinesis Video Streams
}
\section{Service syntax}{
\preformatted{svc <- kinesisvideo(
  config = list(
    credentials = list(
      creds = list(
        access_key_id = "string",
        secret_access_key = "string",
        session_token = "string",
        provider_name = "string"
      ),
      profile = "string"
    ),
    endpoint = "string",
    region = "string"
  )
)
}
}

\section{Operations}{

\tabular{ll}{
\link[=kinesisvideo_create_stream]{create_stream} \tab Creates a new Kinesis video stream \cr
\link[=kinesisvideo_delete_stream]{delete_stream} \tab Deletes a Kinesis video stream and the data contained in the stream \cr
\link[=kinesisvideo_describe_stream]{describe_stream} \tab Returns the most current information about the specified stream \cr
\link[=kinesisvideo_get_data_endpoint]{get_data_endpoint} \tab Gets an endpoint for a specified stream for either reading or writing \cr
\link[=kinesisvideo_list_streams]{list_streams} \tab Returns an array of StreamInfo objects \cr
\link[=kinesisvideo_list_tags_for_stream]{list_tags_for_stream} \tab Returns a list of tags associated with the specified stream \cr
\link[=kinesisvideo_tag_stream]{tag_stream} \tab Adds one or more tags to a stream \cr
\link[=kinesisvideo_untag_stream]{untag_stream} \tab Removes one or more tags from a stream \cr
\link[=kinesisvideo_update_data_retention]{update_data_retention} \tab Increases or decreases the stream's data retention period by the value that you specify\cr
\link[=kinesisvideo_update_stream]{update_stream} \tab Updates stream metadata, such as the device name and media type
}
}

\examples{
\donttest{svc <- kinesisvideo()
svc$create_stream(
  Foo = 123
)}

}
