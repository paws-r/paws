% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/appmesh_operations.R
\name{appmesh_update_route}
\alias{appmesh_update_route}
\title{Updates an existing route for a specified service mesh and virtual
router}
\usage{
appmesh_update_route(clientToken, meshName, meshOwner, routeName, spec,
  virtualRouterName)
}
\arguments{
\item{clientToken}{Unique, case-sensitive identifier that you provide to ensure the
idempotency of the request. Up to 36 letters, numbers, hyphens, and
underscores are allowed.}

\item{meshName}{[required] The name of the service mesh that the route resides in.}

\item{meshOwner}{The AWS IAM account ID of the service mesh owner. If the account ID is
not your own, then it\'s the ID of the account that shared the mesh with
your account. For more information about mesh sharing, see \href{https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html}{Working with shared meshes}.}

\item{routeName}{[required] The name of the route to update.}

\item{spec}{[required] The new route specification to apply. This overwrites the existing data.}

\item{virtualRouterName}{[required] The name of the virtual router that the route is associated with.}
}
\description{
Updates an existing route for a specified service mesh and virtual
router.
}
\section{Request syntax}{
\preformatted{svc$update_route(
  clientToken = "string",
  meshName = "string",
  meshOwner = "string",
  routeName = "string",
  spec = list(
    grpcRoute = list(
      action = list(
        weightedTargets = list(
          list(
            virtualNode = "string",
            weight = 123
          )
        )
      ),
      match = list(
        metadata = list(
          list(
            invert = TRUE|FALSE,
            match = list(
              exact = "string",
              prefix = "string",
              range = list(
                end = 123,
                start = 123
              ),
              regex = "string",
              suffix = "string"
            ),
            name = "string"
          )
        ),
        methodName = "string",
        serviceName = "string"
      ),
      retryPolicy = list(
        grpcRetryEvents = list(
          "cancelled"|"deadline-exceeded"|"internal"|"resource-exhausted"|"unavailable"
        ),
        httpRetryEvents = list(
          "string"
        ),
        maxRetries = 123,
        perRetryTimeout = list(
          unit = "ms"|"s",
          value = 123
        ),
        tcpRetryEvents = list(
          "connection-error"
        )
      ),
      timeout = list(
        idle = list(
          unit = "ms"|"s",
          value = 123
        ),
        perRequest = list(
          unit = "ms"|"s",
          value = 123
        )
      )
    ),
    http2Route = list(
      action = list(
        weightedTargets = list(
          list(
            virtualNode = "string",
            weight = 123
          )
        )
      ),
      match = list(
        headers = list(
          list(
            invert = TRUE|FALSE,
            match = list(
              exact = "string",
              prefix = "string",
              range = list(
                end = 123,
                start = 123
              ),
              regex = "string",
              suffix = "string"
            ),
            name = "string"
          )
        ),
        method = "CONNECT"|"DELETE"|"GET"|"HEAD"|"OPTIONS"|"PATCH"|"POST"|"PUT"|"TRACE",
        prefix = "string",
        scheme = "http"|"https"
      ),
      retryPolicy = list(
        httpRetryEvents = list(
          "string"
        ),
        maxRetries = 123,
        perRetryTimeout = list(
          unit = "ms"|"s",
          value = 123
        ),
        tcpRetryEvents = list(
          "connection-error"
        )
      ),
      timeout = list(
        idle = list(
          unit = "ms"|"s",
          value = 123
        ),
        perRequest = list(
          unit = "ms"|"s",
          value = 123
        )
      )
    ),
    httpRoute = list(
      action = list(
        weightedTargets = list(
          list(
            virtualNode = "string",
            weight = 123
          )
        )
      ),
      match = list(
        headers = list(
          list(
            invert = TRUE|FALSE,
            match = list(
              exact = "string",
              prefix = "string",
              range = list(
                end = 123,
                start = 123
              ),
              regex = "string",
              suffix = "string"
            ),
            name = "string"
          )
        ),
        method = "CONNECT"|"DELETE"|"GET"|"HEAD"|"OPTIONS"|"PATCH"|"POST"|"PUT"|"TRACE",
        prefix = "string",
        scheme = "http"|"https"
      ),
      retryPolicy = list(
        httpRetryEvents = list(
          "string"
        ),
        maxRetries = 123,
        perRetryTimeout = list(
          unit = "ms"|"s",
          value = 123
        ),
        tcpRetryEvents = list(
          "connection-error"
        )
      ),
      timeout = list(
        idle = list(
          unit = "ms"|"s",
          value = 123
        ),
        perRequest = list(
          unit = "ms"|"s",
          value = 123
        )
      )
    ),
    priority = 123,
    tcpRoute = list(
      action = list(
        weightedTargets = list(
          list(
            virtualNode = "string",
            weight = 123
          )
        )
      ),
      timeout = list(
        idle = list(
          unit = "ms"|"s",
          value = 123
        )
      )
    )
  ),
  virtualRouterName = "string"
)
}
}

\keyword{internal}
