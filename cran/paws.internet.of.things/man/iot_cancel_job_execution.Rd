% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/iot_operations.R
\name{iot_cancel_job_execution}
\alias{iot_cancel_job_execution}
\title{Cancels the execution of a job for a given thing}
\usage{
iot_cancel_job_execution(jobId, thingName, force, expectedVersion,
  statusDetails)
}
\arguments{
\item{jobId}{[required] The ID of the job to be canceled.}

\item{thingName}{[required] The name of the thing whose execution of the job will be canceled.}

\item{force}{(Optional) If \code{true} the job execution will be canceled if it has status
IN\\_PROGRESS or QUEUED, otherwise the job execution will be canceled
only if it has status QUEUED. If you attempt to cancel a job execution
that is IN\\_PROGRESS, and you do not set \code{force} to \code{true}, then an
\code{InvalidStateTransitionException} will be thrown. The default is
\code{false}.

Canceling a job execution which is \"IN\\_PROGRESS\", will cause the
device to be unable to update the job execution status. Use caution and
ensure that the device is able to recover to a valid state.}

\item{expectedVersion}{(Optional) The expected current version of the job execution. Each time
you update the job execution, its version is incremented. If the version
of the job execution stored in Jobs does not match, the update is
rejected with a VersionMismatch error, and an ErrorResponse that
contains the current job execution status data is returned. (This makes
it unnecessary to perform a separate DescribeJobExecution request in
order to obtain the job execution status data.)}

\item{statusDetails}{A collection of name/value pairs that describe the status of the job
execution. If not specified, the statusDetails are unchanged. You can
specify at most 10 name/value pairs.}
}
\description{
Cancels the execution of a job for a given thing.
}
\section{Request syntax}{
\preformatted{svc$cancel_job_execution(
  jobId = "string",
  thingName = "string",
  force = TRUE|FALSE,
  expectedVersion = 123,
  statusDetails = list(
    "string"
  )
)
}
}

\keyword{internal}
