% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sagemaker_operations.R
\name{sagemaker_create_auto_ml_job}
\alias{sagemaker_create_auto_ml_job}
\title{Creates an Autopilot job}
\usage{
sagemaker_create_auto_ml_job(AutoMLJobName, InputDataConfig,
  OutputDataConfig, ProblemType, AutoMLJobObjective, AutoMLJobConfig,
  RoleArn, GenerateCandidateDefinitionsOnly, Tags, ModelDeployConfig)
}
\arguments{
\item{AutoMLJobName}{[required] Identifies an Autopilot job. The name must be unique to your account and
is case-insensitive.}

\item{InputDataConfig}{[required] An array of channel objects that describes the input data and its
location. Each channel is a named input source. Similar to
\code{InputDataConfig} supported by . Format(s) supported: CSV. Minimum of
500 rows.}

\item{OutputDataConfig}{[required] Provides information about encryption and the Amazon S3 output path
needed to store artifacts from an AutoML job. Format(s) supported: CSV.

<para>Specifies whether to automatically deploy the best &ATP;
model to an endpoint and the name of that endpoint if deployed
automatically.</para>}

\item{ProblemType}{Defines the type of supervised learning available for the candidates.
Options include: \code{BinaryClassification}, \code{MulticlassClassification}, and
\code{Regression}. For more information, see \href{https://docs.aws.amazon.com/sagemaker/latest/dg/autopilot-automate-model-development-problem-types.html}{Amazon SageMaker Autopilot problem types and algorithm support}.}

\item{AutoMLJobObjective}{Defines the objective metric used to measure the predictive quality of
an AutoML job. You provide an AutoMLJobObjective$MetricName and
Autopilot infers whether to minimize or maximize it.}

\item{AutoMLJobConfig}{Contains \code{CompletionCriteria} and \code{SecurityConfig} settings for the
AutoML job.}

\item{RoleArn}{[required] The ARN of the role that is used to access the data.

<para>Specifies whether to automatically deploy the best &ATP;
model to an endpoint and the name of that endpoint if deployed
automatically.</para>}

\item{GenerateCandidateDefinitionsOnly}{Generates possible candidates without training the models. A candidate
is a combination of data preprocessors, algorithms, and algorithm
parameter settings.}

\item{Tags}{Each tag consists of a key and an optional value. Tag keys must be
unique per resource.}

\item{ModelDeployConfig}{Specifies how to generate the endpoint name for an automatic one-click
Autopilot model deployment.}
}
\value{
A list with the following syntax:\preformatted{list(
  AutoMLJobArn = "string"
)
}
}
\description{
Creates an Autopilot job.

Find the best performing model after you run an Autopilot job by calling
.

For information about how to use Autopilot, see \href{https://docs.aws.amazon.com/sagemaker/latest/dg/autopilot-automate-model-development.html}{Automate Model Development with Amazon SageMaker Autopilot}.
}
\section{Request syntax}{
\preformatted{svc$create_auto_ml_job(
  AutoMLJobName = "string",
  InputDataConfig = list(
    list(
      DataSource = list(
        S3DataSource = list(
          S3DataType = "ManifestFile"|"S3Prefix",
          S3Uri = "string"
        )
      ),
      CompressionType = "None"|"Gzip",
      TargetAttributeName = "string"
    )
  ),
  OutputDataConfig = list(
    KmsKeyId = "string",
    S3OutputPath = "string"
  ),
  ProblemType = "BinaryClassification"|"MulticlassClassification"|"Regression",
  AutoMLJobObjective = list(
    MetricName = "Accuracy"|"MSE"|"F1"|"F1macro"|"AUC"
  ),
  AutoMLJobConfig = list(
    CompletionCriteria = list(
      MaxCandidates = 123,
      MaxRuntimePerTrainingJobInSeconds = 123,
      MaxAutoMLJobRuntimeInSeconds = 123
    ),
    SecurityConfig = list(
      VolumeKmsKeyId = "string",
      EnableInterContainerTrafficEncryption = TRUE|FALSE,
      VpcConfig = list(
        SecurityGroupIds = list(
          "string"
        ),
        Subnets = list(
          "string"
        )
      )
    )
  ),
  RoleArn = "string",
  GenerateCandidateDefinitionsOnly = TRUE|FALSE,
  Tags = list(
    list(
      Key = "string",
      Value = "string"
    )
  ),
  ModelDeployConfig = list(
    AutoGenerateEndpointName = TRUE|FALSE,
    EndpointName = "string"
  )
)
}
}

\keyword{internal}
