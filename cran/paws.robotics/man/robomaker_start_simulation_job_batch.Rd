% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/robomaker_operations.R
\name{robomaker_start_simulation_job_batch}
\alias{robomaker_start_simulation_job_batch}
\title{Starts a new simulation job batch}
\usage{
robomaker_start_simulation_job_batch(clientRequestToken, batchPolicy,
  createSimulationJobRequests, tags)
}
\arguments{
\item{clientRequestToken}{Unique, case-sensitive identifier that you provide to ensure the
idempotency of the request.}

\item{batchPolicy}{The batch policy.}

\item{createSimulationJobRequests}{[required] A list of simulation job requests to create in the batch.}

\item{tags}{A map that contains tag keys and tag values that are attached to the
deployment job batch.}
}
\value{
A list with the following syntax:\preformatted{list(
  arn = "string",
  status = "Pending"|"InProgress"|"Failed"|"Completed"|"Canceled"|"Canceling"|"Completing"|"TimingOut"|"TimedOut",
  createdAt = as.POSIXct(
    "2015-01-01"
  ),
  clientRequestToken = "string",
  batchPolicy = list(
    timeoutInSeconds = 123,
    maxConcurrency = 123
  ),
  failureCode = "InternalServiceError",
  failureReason = "string",
  failedRequests = list(
    list(
      request = list(
        outputLocation = list(
          s3Bucket = "string",
          s3Prefix = "string"
        ),
        loggingConfig = list(
          recordAllRosTopics = TRUE|FALSE
        ),
        maxJobDurationInSeconds = 123,
        iamRole = "string",
        failureBehavior = "Fail"|"Continue",
        useDefaultApplications = TRUE|FALSE,
        robotApplications = list(
          list(
            application = "string",
            applicationVersion = "string",
            launchConfig = list(
              packageName = "string",
              launchFile = "string",
              environmentVariables = list(
                "string"
              ),
              portForwardingConfig = list(
                portMappings = list(
                  list(
                    jobPort = 123,
                    applicationPort = 123,
                    enableOnPublicIp = TRUE|FALSE
                  )
                )
              ),
              streamUI = TRUE|FALSE
            ),
            uploadConfigurations = list(
              list(
                name = "string",
                path = "string",
                uploadBehavior = "UPLOAD_ON_TERMINATE"|"UPLOAD_ROLLING_AUTO_REMOVE"
              )
            ),
            useDefaultUploadConfigurations = TRUE|FALSE,
            tools = list(
              list(
                streamUI = TRUE|FALSE,
                name = "string",
                command = "string",
                streamOutputToCloudWatch = TRUE|FALSE,
                exitBehavior = "FAIL"|"RESTART"
              )
            ),
            useDefaultTools = TRUE|FALSE
          )
        ),
        simulationApplications = list(
          list(
            application = "string",
            applicationVersion = "string",
            launchConfig = list(
              packageName = "string",
              launchFile = "string",
              environmentVariables = list(
                "string"
              ),
              portForwardingConfig = list(
                portMappings = list(
                  list(
                    jobPort = 123,
                    applicationPort = 123,
                    enableOnPublicIp = TRUE|FALSE
                  )
                )
              ),
              streamUI = TRUE|FALSE
            ),
            uploadConfigurations = list(
              list(
                name = "string",
                path = "string",
                uploadBehavior = "UPLOAD_ON_TERMINATE"|"UPLOAD_ROLLING_AUTO_REMOVE"
              )
            ),
            worldConfigs = list(
              list(
                world = "string"
              )
            ),
            useDefaultUploadConfigurations = TRUE|FALSE,
            tools = list(
              list(
                streamUI = TRUE|FALSE,
                name = "string",
                command = "string",
                streamOutputToCloudWatch = TRUE|FALSE,
                exitBehavior = "FAIL"|"RESTART"
              )
            ),
            useDefaultTools = TRUE|FALSE
          )
        ),
        dataSources = list(
          list(
            name = "string",
            s3Bucket = "string",
            s3Keys = list(
              "string"
            )
          )
        ),
        vpcConfig = list(
          subnets = list(
            "string"
          ),
          securityGroups = list(
            "string"
          ),
          assignPublicIp = TRUE|FALSE
        ),
        compute = list(
          simulationUnitLimit = 123
        ),
        tags = list(
          "string"
        )
      ),
      failureReason = "string",
      failureCode = "InternalServiceError"|"RobotApplicationCrash"|"SimulationApplicationCrash"|"RobotApplicationHealthCheckFailure"|"SimulationApplicationHealthCheckFailure"|"BadPermissionsRobotApplication"|"BadPermissionsSimulationApplication"|"BadPermissionsS3Object"|"BadPermissionsS3Output"|"BadPermissionsCloudwatchLogs"|"SubnetIpLimitExceeded"|"ENILimitExceeded"|"BadPermissionsUserCredentials"|"InvalidBundleRobotApplication"|"InvalidBundleSimulationApplication"|"InvalidS3Resource"|"ThrottlingError"|"LimitExceeded"|"MismatchedEtag"|"RobotApplicationVersionMismatchedEtag"|"SimulationApplicationVersionMismatchedEtag"|"ResourceNotFound"|"RequestThrottled"|"BatchTimedOut"|"BatchCanceled"|"InvalidInput"|"WrongRegionS3Bucket"|"WrongRegionS3Output"|"WrongRegionRobotApplication"|"WrongRegionSimulationApplication"|"UploadContentMismatchError",
      failedAt = as.POSIXct(
        "2015-01-01"
      )
    )
  ),
  pendingRequests = list(
    list(
      outputLocation = list(
        s3Bucket = "string",
        s3Prefix = "string"
      ),
      loggingConfig = list(
        recordAllRosTopics = TRUE|FALSE
      ),
      maxJobDurationInSeconds = 123,
      iamRole = "string",
      failureBehavior = "Fail"|"Continue",
      useDefaultApplications = TRUE|FALSE,
      robotApplications = list(
        list(
          application = "string",
          applicationVersion = "string",
          launchConfig = list(
            packageName = "string",
            launchFile = "string",
            environmentVariables = list(
              "string"
            ),
            portForwardingConfig = list(
              portMappings = list(
                list(
                  jobPort = 123,
                  applicationPort = 123,
                  enableOnPublicIp = TRUE|FALSE
                )
              )
            ),
            streamUI = TRUE|FALSE
          ),
          uploadConfigurations = list(
            list(
              name = "string",
              path = "string",
              uploadBehavior = "UPLOAD_ON_TERMINATE"|"UPLOAD_ROLLING_AUTO_REMOVE"
            )
          ),
          useDefaultUploadConfigurations = TRUE|FALSE,
          tools = list(
            list(
              streamUI = TRUE|FALSE,
              name = "string",
              command = "string",
              streamOutputToCloudWatch = TRUE|FALSE,
              exitBehavior = "FAIL"|"RESTART"
            )
          ),
          useDefaultTools = TRUE|FALSE
        )
      ),
      simulationApplications = list(
        list(
          application = "string",
          applicationVersion = "string",
          launchConfig = list(
            packageName = "string",
            launchFile = "string",
            environmentVariables = list(
              "string"
            ),
            portForwardingConfig = list(
              portMappings = list(
                list(
                  jobPort = 123,
                  applicationPort = 123,
                  enableOnPublicIp = TRUE|FALSE
                )
              )
            ),
            streamUI = TRUE|FALSE
          ),
          uploadConfigurations = list(
            list(
              name = "string",
              path = "string",
              uploadBehavior = "UPLOAD_ON_TERMINATE"|"UPLOAD_ROLLING_AUTO_REMOVE"
            )
          ),
          worldConfigs = list(
            list(
              world = "string"
            )
          ),
          useDefaultUploadConfigurations = TRUE|FALSE,
          tools = list(
            list(
              streamUI = TRUE|FALSE,
              name = "string",
              command = "string",
              streamOutputToCloudWatch = TRUE|FALSE,
              exitBehavior = "FAIL"|"RESTART"
            )
          ),
          useDefaultTools = TRUE|FALSE
        )
      ),
      dataSources = list(
        list(
          name = "string",
          s3Bucket = "string",
          s3Keys = list(
            "string"
          )
        )
      ),
      vpcConfig = list(
        subnets = list(
          "string"
        ),
        securityGroups = list(
          "string"
        ),
        assignPublicIp = TRUE|FALSE
      ),
      compute = list(
        simulationUnitLimit = 123
      ),
      tags = list(
        "string"
      )
    )
  ),
  createdRequests = list(
    list(
      arn = "string",
      lastUpdatedAt = as.POSIXct(
        "2015-01-01"
      ),
      name = "string",
      status = "Pending"|"Preparing"|"Running"|"Restarting"|"Completed"|"Failed"|"RunningFailed"|"Terminating"|"Terminated"|"Canceled",
      simulationApplicationNames = list(
        "string"
      ),
      robotApplicationNames = list(
        "string"
      ),
      dataSourceNames = list(
        "string"
      )
    )
  ),
  tags = list(
    "string"
  )
)
}
}
\description{
Starts a new simulation job batch. The batch is defined using one or
more \code{SimulationJobRequest} objects.
}
\section{Request syntax}{
\preformatted{svc$start_simulation_job_batch(
  clientRequestToken = "string",
  batchPolicy = list(
    timeoutInSeconds = 123,
    maxConcurrency = 123
  ),
  createSimulationJobRequests = list(
    list(
      outputLocation = list(
        s3Bucket = "string",
        s3Prefix = "string"
      ),
      loggingConfig = list(
        recordAllRosTopics = TRUE|FALSE
      ),
      maxJobDurationInSeconds = 123,
      iamRole = "string",
      failureBehavior = "Fail"|"Continue",
      useDefaultApplications = TRUE|FALSE,
      robotApplications = list(
        list(
          application = "string",
          applicationVersion = "string",
          launchConfig = list(
            packageName = "string",
            launchFile = "string",
            environmentVariables = list(
              "string"
            ),
            portForwardingConfig = list(
              portMappings = list(
                list(
                  jobPort = 123,
                  applicationPort = 123,
                  enableOnPublicIp = TRUE|FALSE
                )
              )
            ),
            streamUI = TRUE|FALSE
          ),
          uploadConfigurations = list(
            list(
              name = "string",
              path = "string",
              uploadBehavior = "UPLOAD_ON_TERMINATE"|"UPLOAD_ROLLING_AUTO_REMOVE"
            )
          ),
          useDefaultUploadConfigurations = TRUE|FALSE,
          tools = list(
            list(
              streamUI = TRUE|FALSE,
              name = "string",
              command = "string",
              streamOutputToCloudWatch = TRUE|FALSE,
              exitBehavior = "FAIL"|"RESTART"
            )
          ),
          useDefaultTools = TRUE|FALSE
        )
      ),
      simulationApplications = list(
        list(
          application = "string",
          applicationVersion = "string",
          launchConfig = list(
            packageName = "string",
            launchFile = "string",
            environmentVariables = list(
              "string"
            ),
            portForwardingConfig = list(
              portMappings = list(
                list(
                  jobPort = 123,
                  applicationPort = 123,
                  enableOnPublicIp = TRUE|FALSE
                )
              )
            ),
            streamUI = TRUE|FALSE
          ),
          uploadConfigurations = list(
            list(
              name = "string",
              path = "string",
              uploadBehavior = "UPLOAD_ON_TERMINATE"|"UPLOAD_ROLLING_AUTO_REMOVE"
            )
          ),
          worldConfigs = list(
            list(
              world = "string"
            )
          ),
          useDefaultUploadConfigurations = TRUE|FALSE,
          tools = list(
            list(
              streamUI = TRUE|FALSE,
              name = "string",
              command = "string",
              streamOutputToCloudWatch = TRUE|FALSE,
              exitBehavior = "FAIL"|"RESTART"
            )
          ),
          useDefaultTools = TRUE|FALSE
        )
      ),
      dataSources = list(
        list(
          name = "string",
          s3Bucket = "string",
          s3Keys = list(
            "string"
          )
        )
      ),
      vpcConfig = list(
        subnets = list(
          "string"
        ),
        securityGroups = list(
          "string"
        ),
        assignPublicIp = TRUE|FALSE
      ),
      compute = list(
        simulationUnitLimit = 123
      ),
      tags = list(
        "string"
      )
    )
  ),
  tags = list(
    "string"
  )
)
}
}

\keyword{internal}
