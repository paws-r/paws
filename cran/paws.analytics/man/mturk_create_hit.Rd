% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mturk_operations.R
\name{mturk_create_hit}
\alias{mturk_create_hit}
\title{The CreateHIT operation creates a new Human Intelligence Task (HIT)}
\usage{
mturk_create_hit(MaxAssignments, AutoApprovalDelayInSeconds,
  LifetimeInSeconds, AssignmentDurationInSeconds, Reward, Title, Keywords,
  Description, Question, RequesterAnnotation, QualificationRequirements,
  UniqueRequestToken, AssignmentReviewPolicy, HITReviewPolicy,
  HITLayoutId, HITLayoutParameters)
}
\arguments{
\item{MaxAssignments}{The number of times the HIT can be accepted and completed before the HIT
becomes unavailable.}

\item{AutoApprovalDelayInSeconds}{The number of seconds after an assignment for the HIT has been
submitted, after which the assignment is considered Approved
automatically unless the Requester explicitly rejects it.}

\item{LifetimeInSeconds}{[required] An amount of time, in seconds, after which the HIT is no longer
available for users to accept. After the lifetime of the HIT elapses,
the HIT no longer appears in HIT searches, even if not all of the
assignments for the HIT have been accepted.}

\item{AssignmentDurationInSeconds}{[required] The amount of time, in seconds, that a Worker has to complete the HIT
after accepting it. If a Worker does not complete the assignment within
the specified duration, the assignment is considered abandoned. If the
HIT is still active (that is, its lifetime has not elapsed), the
assignment becomes available for other users to find and accept.}

\item{Reward}{[required] The amount of money the Requester will pay a Worker for successfully
completing the HIT.}

\item{Title}{[required] The title of the HIT. A title should be short and descriptive about the
kind of task the HIT contains. On the Amazon Mechanical Turk web site,
the HIT title appears in search results, and everywhere the HIT is
mentioned.}

\item{Keywords}{One or more words or phrases that describe the HIT, separated by commas.
These words are used in searches to find HITs.}

\item{Description}{[required] A general description of the HIT. A description includes detailed
information about the kind of task the HIT contains. On the Amazon
Mechanical Turk web site, the HIT description appears in the expanded
view of search results, and in the HIT and assignment screens. A good
description gives the user enough information to evaluate the HIT before
accepting it.}

\item{Question}{The data the person completing the HIT uses to produce the results.

Constraints: Must be a QuestionForm data structure, an ExternalQuestion
data structure, or an HTMLQuestion data structure. The XML question data
must not be larger than 64 kilobytes (65,535 bytes) in size, including
whitespace.

Either a Question parameter or a HITLayoutId parameter must be provided.}

\item{RequesterAnnotation}{An arbitrary data field. The RequesterAnnotation parameter lets your
application attach arbitrary data to the HIT for tracking purposes. For
example, this parameter could be an identifier internal to the
Requester\'s application that corresponds with the HIT.

The RequesterAnnotation parameter for a HIT is only visible to the
Requester who created the HIT. It is not shown to the Worker, or any
other Requester.

The RequesterAnnotation parameter may be different for each HIT you
submit. It does not affect how your HITs are grouped.}

\item{QualificationRequirements}{Conditions that a Worker\'s Qualifications must meet in order to accept
the HIT. A HIT can have between zero and ten Qualification requirements.
All requirements must be met in order for a Worker to accept the HIT.
Additionally, other actions can be restricted using the \code{ActionsGuarded}
field on each \code{QualificationRequirement} structure.}

\item{UniqueRequestToken}{A unique identifier for this request which allows you to retry the call
on error without creating duplicate HITs. This is useful in cases such
as network timeouts where it is unclear whether or not the call
succeeded on the server. If the HIT already exists in the system from a
previous call using the same UniqueRequestToken, subsequent calls will
return a AWS.MechanicalTurk.HitAlreadyExists error with a message
containing the HITId.

Note: It is your responsibility to ensure uniqueness of the token. The
unique token expires after 24 hours. Subsequent calls using the same
UniqueRequestToken made after the 24 hour limit could create duplicate
HITs.}

\item{AssignmentReviewPolicy}{The Assignment-level Review Policy applies to the assignments under the
HIT. You can specify for Mechanical Turk to take various actions based
on the policy.}

\item{HITReviewPolicy}{The HIT-level Review Policy applies to the HIT. You can specify for
Mechanical Turk to take various actions based on the policy.}

\item{HITLayoutId}{The HITLayoutId allows you to use a pre-existing HIT design with
placeholder values and create an additional HIT by providing those
values as HITLayoutParameters.

Constraints: Either a Question parameter or a HITLayoutId parameter must
be provided.}

\item{HITLayoutParameters}{If the HITLayoutId is provided, any placeholder values must be filled in
with values using the HITLayoutParameter structure. For more
information, see HITLayout.}
}
\description{
The \code{CreateHIT} operation creates a new Human Intelligence Task (HIT).
The new HIT is made available for Workers to find and accept on the
Amazon Mechanical Turk website.
}
\details{
This operation allows you to specify a new HIT by passing in values for
the properties of the HIT, such as its title, reward amount and number
of assignments. When you pass these values to \code{CreateHIT}, a new HIT is
created for you, with a new \code{HITTypeID}. The HITTypeID can be used to
create additional HITs in the future without needing to specify common
parameters such as the title, description and reward amount each time.

An alternative way to create HITs is to first generate a HITTypeID using
the \code{CreateHITType} operation and then call the \code{CreateHITWithHITType}
operation. This is the recommended best practice for Requesters who are
creating large numbers of HITs.

CreateHIT also supports several ways to provide question data: by
providing a value for the \code{Question} parameter that fully specifies the
contents of the HIT, or by providing a \code{HitLayoutId} and associated
\code{HitLayoutParameters}.

If a HIT is created with 10 or more maximum assignments, there is an
additional fee. For more information, see \href{https://requester.mturk.com/pricing}{Amazon Mechanical Turk Pricing}.
}
\section{Request syntax}{
\preformatted{svc$create_hit(
  MaxAssignments = 123,
  AutoApprovalDelayInSeconds = 123,
  LifetimeInSeconds = 123,
  AssignmentDurationInSeconds = 123,
  Reward = "string",
  Title = "string",
  Keywords = "string",
  Description = "string",
  Question = "string",
  RequesterAnnotation = "string",
  QualificationRequirements = list(
    list(
      QualificationTypeId = "string",
      Comparator = "LessThan"|"LessThanOrEqualTo"|"GreaterThan"|"GreaterThanOrEqualTo"|"EqualTo"|"NotEqualTo"|"Exists"|"DoesNotExist"|"In"|"NotIn",
      IntegerValues = list(
        123
      ),
      LocaleValues = list(
        list(
          Country = "string",
          Subdivision = "string"
        )
      ),
      RequiredToPreview = TRUE|FALSE,
      ActionsGuarded = "Accept"|"PreviewAndAccept"|"DiscoverPreviewAndAccept"
    )
  ),
  UniqueRequestToken = "string",
  AssignmentReviewPolicy = list(
    PolicyName = "string",
    Parameters = list(
      list(
        Key = "string",
        Values = list(
          "string"
        ),
        MapEntries = list(
          list(
            Key = "string",
            Values = list(
              "string"
            )
          )
        )
      )
    )
  ),
  HITReviewPolicy = list(
    PolicyName = "string",
    Parameters = list(
      list(
        Key = "string",
        Values = list(
          "string"
        ),
        MapEntries = list(
          list(
            Key = "string",
            Values = list(
              "string"
            )
          )
        )
      )
    )
  ),
  HITLayoutId = "string",
  HITLayoutParameters = list(
    list(
      Name = "string",
      Value = "string"
    )
  )
)
}
}

\keyword{internal}
