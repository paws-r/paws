% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/glue_operations.R
\name{glue_get_workflow}
\alias{glue_get_workflow}
\title{Retrieves resource metadata for a workflow}
\usage{
glue_get_workflow(Name, IncludeGraph)
}
\arguments{
\item{Name}{[required] The name of the workflow to retrieve.}

\item{IncludeGraph}{Specifies whether to include a graph when returning the workflow
resource metadata.}
}
\value{
A list with the following syntax:\preformatted{list(
  Workflow = list(
    Name = "string",
    Description = "string",
    DefaultRunProperties = list(
      "string"
    ),
    CreatedOn = as.POSIXct(
      "2015-01-01"
    ),
    LastModifiedOn = as.POSIXct(
      "2015-01-01"
    ),
    LastRun = list(
      Name = "string",
      WorkflowRunId = "string",
      PreviousRunId = "string",
      WorkflowRunProperties = list(
        "string"
      ),
      StartedOn = as.POSIXct(
        "2015-01-01"
      ),
      CompletedOn = as.POSIXct(
        "2015-01-01"
      ),
      Status = "RUNNING"|"COMPLETED"|"STOPPING"|"STOPPED"|"ERROR",
      ErrorMessage = "string",
      Statistics = list(
        TotalActions = 123,
        TimeoutActions = 123,
        FailedActions = 123,
        StoppedActions = 123,
        SucceededActions = 123,
        RunningActions = 123
      ),
      Graph = list(
        Nodes = list(
          list(
            Type = "CRAWLER"|"JOB"|"TRIGGER",
            Name = "string",
            UniqueId = "string",
            TriggerDetails = list(
              Trigger = list(
                Name = "string",
                WorkflowName = "string",
                Id = "string",
                Type = "SCHEDULED"|"CONDITIONAL"|"ON_DEMAND",
                State = "CREATING"|"CREATED"|"ACTIVATING"|"ACTIVATED"|"DEACTIVATING"|"DEACTIVATED"|"DELETING"|"UPDATING",
                Description = "string",
                Schedule = "string",
                Actions = list(
                  list(
                    JobName = "string",
                    Arguments = list(
                      "string"
                    ),
                    Timeout = 123,
                    SecurityConfiguration = "string",
                    NotificationProperty = list(
                      NotifyDelayAfter = 123
                    ),
                    CrawlerName = "string"
                  )
                ),
                Predicate = list(
                  Logical = "AND"|"ANY",
                  Conditions = list(
                    list(
                      LogicalOperator = "EQUALS",
                      JobName = "string",
                      State = "STARTING"|"RUNNING"|"STOPPING"|"STOPPED"|"SUCCEEDED"|"FAILED"|"TIMEOUT",
                      CrawlerName = "string",
                      CrawlState = "RUNNING"|"CANCELLING"|"CANCELLED"|"SUCCEEDED"|"FAILED"
                    )
                  )
                )
              )
            ),
            JobDetails = list(
              JobRuns = list(
                list(
                  Id = "string",
                  Attempt = 123,
                  PreviousRunId = "string",
                  TriggerName = "string",
                  JobName = "string",
                  StartedOn = as.POSIXct(
                    "2015-01-01"
                  ),
                  LastModifiedOn = as.POSIXct(
                    "2015-01-01"
                  ),
                  CompletedOn = as.POSIXct(
                    "2015-01-01"
                  ),
                  JobRunState = "STARTING"|"RUNNING"|"STOPPING"|"STOPPED"|"SUCCEEDED"|"FAILED"|"TIMEOUT",
                  Arguments = list(
                    "string"
                  ),
                  ErrorMessage = "string",
                  PredecessorRuns = list(
                    list(
                      JobName = "string",
                      RunId = "string"
                    )
                  ),
                  AllocatedCapacity = 123,
                  ExecutionTime = 123,
                  Timeout = 123,
                  MaxCapacity = 123.0,
                  WorkerType = "Standard"|"G.1X"|"G.2X",
                  NumberOfWorkers = 123,
                  SecurityConfiguration = "string",
                  LogGroupName = "string",
                  NotificationProperty = list(
                    NotifyDelayAfter = 123
                  ),
                  GlueVersion = "string"
                )
              )
            ),
            CrawlerDetails = list(
              Crawls = list(
                list(
                  State = "RUNNING"|"CANCELLING"|"CANCELLED"|"SUCCEEDED"|"FAILED",
                  StartedOn = as.POSIXct(
                    "2015-01-01"
                  ),
                  CompletedOn = as.POSIXct(
                    "2015-01-01"
                  ),
                  ErrorMessage = "string",
                  LogGroup = "string",
                  LogStream = "string"
                )
              )
            )
          )
        ),
        Edges = list(
          list(
            SourceId = "string",
            DestinationId = "string"
          )
        )
      )
    ),
    Graph = list(
      Nodes = list(
        list(
          Type = "CRAWLER"|"JOB"|"TRIGGER",
          Name = "string",
          UniqueId = "string",
          TriggerDetails = list(
            Trigger = list(
              Name = "string",
              WorkflowName = "string",
              Id = "string",
              Type = "SCHEDULED"|"CONDITIONAL"|"ON_DEMAND",
              State = "CREATING"|"CREATED"|"ACTIVATING"|"ACTIVATED"|"DEACTIVATING"|"DEACTIVATED"|"DELETING"|"UPDATING",
              Description = "string",
              Schedule = "string",
              Actions = list(
                list(
                  JobName = "string",
                  Arguments = list(
                    "string"
                  ),
                  Timeout = 123,
                  SecurityConfiguration = "string",
                  NotificationProperty = list(
                    NotifyDelayAfter = 123
                  ),
                  CrawlerName = "string"
                )
              ),
              Predicate = list(
                Logical = "AND"|"ANY",
                Conditions = list(
                  list(
                    LogicalOperator = "EQUALS",
                    JobName = "string",
                    State = "STARTING"|"RUNNING"|"STOPPING"|"STOPPED"|"SUCCEEDED"|"FAILED"|"TIMEOUT",
                    CrawlerName = "string",
                    CrawlState = "RUNNING"|"CANCELLING"|"CANCELLED"|"SUCCEEDED"|"FAILED"
                  )
                )
              )
            )
          ),
          JobDetails = list(
            JobRuns = list(
              list(
                Id = "string",
                Attempt = 123,
                PreviousRunId = "string",
                TriggerName = "string",
                JobName = "string",
                StartedOn = as.POSIXct(
                  "2015-01-01"
                ),
                LastModifiedOn = as.POSIXct(
                  "2015-01-01"
                ),
                CompletedOn = as.POSIXct(
                  "2015-01-01"
                ),
                JobRunState = "STARTING"|"RUNNING"|"STOPPING"|"STOPPED"|"SUCCEEDED"|"FAILED"|"TIMEOUT",
                Arguments = list(
                  "string"
                ),
                ErrorMessage = "string",
                PredecessorRuns = list(
                  list(
                    JobName = "string",
                    RunId = "string"
                  )
                ),
                AllocatedCapacity = 123,
                ExecutionTime = 123,
                Timeout = 123,
                MaxCapacity = 123.0,
                WorkerType = "Standard"|"G.1X"|"G.2X",
                NumberOfWorkers = 123,
                SecurityConfiguration = "string",
                LogGroupName = "string",
                NotificationProperty = list(
                  NotifyDelayAfter = 123
                ),
                GlueVersion = "string"
              )
            )
          ),
          CrawlerDetails = list(
            Crawls = list(
              list(
                State = "RUNNING"|"CANCELLING"|"CANCELLED"|"SUCCEEDED"|"FAILED",
                StartedOn = as.POSIXct(
                  "2015-01-01"
                ),
                CompletedOn = as.POSIXct(
                  "2015-01-01"
                ),
                ErrorMessage = "string",
                LogGroup = "string",
                LogStream = "string"
              )
            )
          )
        )
      ),
      Edges = list(
        list(
          SourceId = "string",
          DestinationId = "string"
        )
      )
    ),
    MaxConcurrentRuns = 123
  )
)
}
}
\description{
Retrieves resource metadata for a workflow.
}
\section{Request syntax}{
\preformatted{svc$get_workflow(
  Name = "string",
  IncludeGraph = TRUE|FALSE
)
}
}

\keyword{internal}
