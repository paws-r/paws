% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/appmesh_operations.R
\name{appmesh_delete_virtual_node}
\alias{appmesh_delete_virtual_node}
\title{Deletes an existing virtual node}
\usage{
appmesh_delete_virtual_node(meshName, meshOwner, virtualNodeName)
}
\arguments{
\item{meshName}{[required] The name of the service mesh to delete the virtual node in.}

\item{meshOwner}{The AWS IAM account ID of the service mesh owner. If the account ID is
not your own, then it's the ID of the account that shared the mesh with
your account. For more information about mesh sharing, see \href{https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html}{Working with shared meshes}.}

\item{virtualNodeName}{[required] The name of the virtual node to delete.}
}
\value{
A list with the following syntax:\preformatted{list(
  virtualNode = list(
    meshName = "string",
    metadata = list(
      arn = "string",
      createdAt = as.POSIXct(
        "2015-01-01"
      ),
      lastUpdatedAt = as.POSIXct(
        "2015-01-01"
      ),
      meshOwner = "string",
      resourceOwner = "string",
      uid = "string",
      version = 123
    ),
    spec = list(
      backendDefaults = list(
        clientPolicy = list(
          tls = list(
            enforce = TRUE|FALSE,
            ports = list(
              123
            ),
            validation = list(
              trust = list(
                acm = list(
                  certificateAuthorityArns = list(
                    "string"
                  )
                ),
                file = list(
                  certificateChain = "string"
                )
              )
            )
          )
        )
      ),
      backends = list(
        list(
          virtualService = list(
            clientPolicy = list(
              tls = list(
                enforce = TRUE|FALSE,
                ports = list(
                  123
                ),
                validation = list(
                  trust = list(
                    acm = list(
                      certificateAuthorityArns = list(
                        "string"
                      )
                    ),
                    file = list(
                      certificateChain = "string"
                    )
                  )
                )
              )
            ),
            virtualServiceName = "string"
          )
        )
      ),
      listeners = list(
        list(
          connectionPool = list(
            grpc = list(
              maxRequests = 123
            ),
            http = list(
              maxConnections = 123,
              maxPendingRequests = 123
            ),
            http2 = list(
              maxRequests = 123
            ),
            tcp = list(
              maxConnections = 123
            )
          ),
          healthCheck = list(
            healthyThreshold = 123,
            intervalMillis = 123,
            path = "string",
            port = 123,
            protocol = "http"|"tcp"|"http2"|"grpc",
            timeoutMillis = 123,
            unhealthyThreshold = 123
          ),
          outlierDetection = list(
            baseEjectionDuration = list(
              unit = "s"|"ms",
              value = 123
            ),
            interval = list(
              unit = "s"|"ms",
              value = 123
            ),
            maxEjectionPercent = 123,
            maxServerErrors = 123
          ),
          portMapping = list(
            port = 123,
            protocol = "http"|"tcp"|"http2"|"grpc"
          ),
          timeout = list(
            grpc = list(
              idle = list(
                unit = "s"|"ms",
                value = 123
              ),
              perRequest = list(
                unit = "s"|"ms",
                value = 123
              )
            ),
            http = list(
              idle = list(
                unit = "s"|"ms",
                value = 123
              ),
              perRequest = list(
                unit = "s"|"ms",
                value = 123
              )
            ),
            http2 = list(
              idle = list(
                unit = "s"|"ms",
                value = 123
              ),
              perRequest = list(
                unit = "s"|"ms",
                value = 123
              )
            ),
            tcp = list(
              idle = list(
                unit = "s"|"ms",
                value = 123
              )
            )
          ),
          tls = list(
            certificate = list(
              acm = list(
                certificateArn = "string"
              ),
              file = list(
                certificateChain = "string",
                privateKey = "string"
              )
            ),
            mode = "STRICT"|"PERMISSIVE"|"DISABLED"
          )
        )
      ),
      logging = list(
        accessLog = list(
          file = list(
            path = "string"
          )
        )
      ),
      serviceDiscovery = list(
        awsCloudMap = list(
          attributes = list(
            list(
              key = "string",
              value = "string"
            )
          ),
          namespaceName = "string",
          serviceName = "string"
        ),
        dns = list(
          hostname = "string"
        )
      )
    ),
    status = list(
      status = "ACTIVE"|"INACTIVE"|"DELETED"
    ),
    virtualNodeName = "string"
  )
)
}
}
\description{
Deletes an existing virtual node.

You must delete any virtual services that list a virtual node as a
service provider before you can delete the virtual node itself.
}
\section{Request syntax}{
\preformatted{svc$delete_virtual_node(
  meshName = "string",
  meshOwner = "string",
  virtualNodeName = "string"
)
}
}

\keyword{internal}
