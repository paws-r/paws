% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/gamelift_operations.R
\name{gamelift_create_fleet}
\alias{gamelift_create_fleet}
\title{Creates a fleet of Amazon Elastic Compute Cloud (Amazon EC2) instances
to host your custom game server or Realtime Servers}
\usage{
gamelift_create_fleet(Name, Description, BuildId, ScriptId,
  ServerLaunchPath, ServerLaunchParameters, LogPaths, EC2InstanceType,
  EC2InboundPermissions, NewGameSessionProtectionPolicy,
  RuntimeConfiguration, ResourceCreationLimitPolicy, MetricGroups,
  PeerVpcAwsAccountId, PeerVpcId, FleetType, InstanceRoleArn,
  CertificateConfiguration, Locations, Tags)
}
\arguments{
\item{Name}{[required] A descriptive label that is associated with a fleet. Fleet names do not
need to be unique.}

\item{Description}{A human-readable description of the fleet.}

\item{BuildId}{The unique identifier for a custom game server build to be deployed on
fleet instances. You can use either the build ID or ARN. The build must
be uploaded to GameLift and in \code{READY} status. This fleet property
cannot be changed later.}

\item{ScriptId}{The unique identifier for a Realtime configuration script to be deployed
on fleet instances. You can use either the script ID or ARN. Scripts
must be uploaded to GameLift prior to creating the fleet. This fleet
property cannot be changed later.}

\item{ServerLaunchPath}{\strong{This parameter is no longer used.} Specify a server launch path using
the \code{RuntimeConfiguration} parameter. Requests that use this parameter
instead continue to be valid.}

\item{ServerLaunchParameters}{\strong{This parameter is no longer used.} Specify server launch parameters
using the \code{RuntimeConfiguration} parameter. Requests that use this
parameter instead continue to be valid.}

\item{LogPaths}{\strong{This parameter is no longer used.} To specify where GameLift should
store log files once a server process shuts down, use the GameLift
server API \code{ProcessReady()} and specify one or more directory paths in
\code{logParameters}. See more information in the \href{https://docs.aws.amazon.com/gamelift/latest/developerguide/#gamelift-sdk-server-api-ref-dataypes-process}{Server API Reference}.}

\item{EC2InstanceType}{[required] The GameLift-supported EC2 instance type to use for all fleet instances.
Instance type determines the computing resources that will be used to
host your game servers, including CPU, memory, storage, and networking
capacity. See \href{https://aws.amazon.com/ec2/instance-types/}{Amazon EC2 Instance Types} for detailed
descriptions of EC2 instance types.}

\item{EC2InboundPermissions}{The allowed IP address ranges and port settings that allow inbound
traffic to access game sessions on this fleet. If the fleet is hosting a
custom game build, this property must be set before players can connect
to game sessions. For Realtime Servers fleets, GameLift automatically
sets TCP and UDP ranges.}

\item{NewGameSessionProtectionPolicy}{The status of termination protection for active game sessions on the
fleet. By default, this property is set to \code{NoProtection}. You can also
set game session protection for an individual game session by calling
\code{\link[=gamelift_update_game_session]{update_game_session}}.
\itemize{
\item \strong{NoProtection} - Game sessions can be terminated during active
gameplay as a result of a scale-down event.
\item \strong{FullProtection} - Game sessions in \code{ACTIVE} status cannot be
terminated during a scale-down event.
}}

\item{RuntimeConfiguration}{Instructions for how to launch and maintain server processes on
instances in the fleet. The runtime configuration defines one or more
server process configurations, each identifying a build executable or
Realtime script file and the number of processes of that type to run
concurrently.

The \code{RuntimeConfiguration} parameter is required unless the fleet is
being configured using the older parameters \code{ServerLaunchPath} and
\code{ServerLaunchParameters}, which are still supported for backward
compatibility.}

\item{ResourceCreationLimitPolicy}{A policy that limits the number of game sessions that an individual
player can create on instances in this fleet within a specified span of
time.}

\item{MetricGroups}{The name of an AWS CloudWatch metric group to add this fleet to. A
metric group is used to aggregate the metrics for multiple fleets. You
can specify an existing metric group name or set a new name to create a
new metric group. A fleet can be included in only one metric group at a
time.}

\item{PeerVpcAwsAccountId}{Used when peering your GameLift fleet with a VPC, the unique identifier
for the AWS account that owns the VPC. You can find your account ID in
the AWS Management Console under account settings.}

\item{PeerVpcId}{A unique identifier for a VPC with resources to be accessed by your
GameLift fleet. The VPC must be in the same Region as your fleet. To
look up a VPC ID, use the VPC Dashboard in the AWS Management Console.
Learn more about VPC peering in \href{https://docs.aws.amazon.com/gamelift/latest/developerguide/vpc-peering.html}{VPC Peering with GameLift Fleets}.}

\item{FleetType}{Indicates whether to use On-Demand or Spot instances for this fleet. By
default, this property is set to \code{ON_DEMAND}. Learn more about when to
use \href{https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-ec2-instances.html#gamelift-ec2-instances-spot}{On-Demand versus Spot Instances}.
This property cannot be changed after the fleet is created.}

\item{InstanceRoleArn}{A unique identifier for an AWS IAM role that manages access to your AWS
services. With an instance role ARN set, any application that runs on an
instance in this fleet can assume the role, including install scripts,
server processes, and daemons (background processes). Create a role or
look up a role's ARN by using the IAM dashboard in the AWS Management
Console. Learn more about using on-box credentials for your game servers
at \href{https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-sdk-server-resources.html}{Access external resources from a game server}.
This property cannot be changed after the fleet is created.}

\item{CertificateConfiguration}{Prompts GameLift to generate a TLS/SSL certificate for the fleet. TLS
certificates are used for encrypting traffic between game clients and
the game servers that are running on GameLift. By default, the
\code{CertificateConfiguration} is set to \code{DISABLED}. Learn more at \href{https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-howitworks.html#gamelift-howitworks-security}{Securing Client/Server Communication}.
This property cannot be changed after the fleet is created.

Note: This feature requires the AWS Certificate Manager (ACM) service,
which is not available in all AWS regions. When working in a region that
does not support this feature, a fleet creation request with certificate
generation fails with a 4xx error.}

\item{Locations}{A set of remote locations to deploy additional instances to and manage
as part of the fleet. This parameter can only be used when creating
fleets in AWS Regions that support multiple locations. You can add any
GameLift-supported AWS Region as a remote location, in the form of an
AWS Region code such as \code{us-west-2}. To create a fleet with instances in
the home Region only, omit this parameter.}

\item{Tags}{A list of labels to assign to the new fleet resource. Tags are
developer-defined key-value pairs. Tagging AWS resources are useful for
resource management, access management and cost allocation. For more
information, see \href{https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html}{Tagging AWS Resources}
in the \emph{AWS General Reference}. Once the fleet is created, you can use
\code{\link[=gamelift_tag_resource]{tag_resource}},
\code{\link[=gamelift_untag_resource]{untag_resource}}, and
\code{\link[=gamelift_list_tags_for_resource]{list_tags_for_resource}} to add,
remove, and view tags. The maximum tag limit may be lower than stated.
See the \emph{AWS General Reference} for actual tagging limits.}
}
\value{
A list with the following syntax:\preformatted{list(
  FleetAttributes = list(
    FleetId = "string",
    FleetArn = "string",
    FleetType = "ON_DEMAND"|"SPOT",
    InstanceType = "t2.micro"|"t2.small"|"t2.medium"|"t2.large"|"c3.large"|"c3.xlarge"|"c3.2xlarge"|"c3.4xlarge"|"c3.8xlarge"|"c4.large"|"c4.xlarge"|"c4.2xlarge"|"c4.4xlarge"|"c4.8xlarge"|"c5.large"|"c5.xlarge"|"c5.2xlarge"|"c5.4xlarge"|"c5.9xlarge"|"c5.12xlarge"|"c5.18xlarge"|"c5.24xlarge"|"c5a.large"|"c5a.xlarge"|"c5a.2xlarge"|"c5a.4xlarge"|"c5a.8xlarge"|"c5a.12xlarge"|"c5a.16xlarge"|"c5a.24xlarge"|"r3.large"|"r3.xlarge"|"r3.2xlarge"|"r3.4xlarge"|"r3.8xlarge"|"r4.large"|"r4.xlarge"|"r4.2xlarge"|"r4.4xlarge"|"r4.8xlarge"|"r4.16xlarge"|"r5.large"|"r5.xlarge"|"r5.2xlarge"|"r5.4xlarge"|"r5.8xlarge"|"r5.12xlarge"|"r5.16xlarge"|"r5.24xlarge"|"r5a.large"|"r5a.xlarge"|"r5a.2xlarge"|"r5a.4xlarge"|"r5a.8xlarge"|"r5a.12xlarge"|"r5a.16xlarge"|"r5a.24xlarge"|"m3.medium"|"m3.large"|"m3.xlarge"|"m3.2xlarge"|"m4.large"|"m4.xlarge"|"m4.2xlarge"|"m4.4xlarge"|"m4.10xlarge"|"m5.large"|"m5.xlarge"|"m5.2xlarge"|"m5.4xlarge"|"m5.8xlarge"|"m5.12xlarge"|"m5.16xlarge"|"m5.24xlarge"|"m5a.large"|"m5a.xlarge"|"m5a.2xlarge"|"m5a.4xlarge"|"m5a.8xlarge"|"m5a.12xlarge"|"m5a.16xlarge"|"m5a.24xlarge",
    Description = "string",
    Name = "string",
    CreationTime = as.POSIXct(
      "2015-01-01"
    ),
    TerminationTime = as.POSIXct(
      "2015-01-01"
    ),
    Status = "NEW"|"DOWNLOADING"|"VALIDATING"|"BUILDING"|"ACTIVATING"|"ACTIVE"|"DELETING"|"ERROR"|"TERMINATED",
    BuildId = "string",
    BuildArn = "string",
    ScriptId = "string",
    ScriptArn = "string",
    ServerLaunchPath = "string",
    ServerLaunchParameters = "string",
    LogPaths = list(
      "string"
    ),
    NewGameSessionProtectionPolicy = "NoProtection"|"FullProtection",
    OperatingSystem = "WINDOWS_2012"|"AMAZON_LINUX"|"AMAZON_LINUX_2",
    ResourceCreationLimitPolicy = list(
      NewGameSessionsPerCreator = 123,
      PolicyPeriodInMinutes = 123
    ),
    MetricGroups = list(
      "string"
    ),
    StoppedActions = list(
      "AUTO_SCALING"
    ),
    InstanceRoleArn = "string",
    CertificateConfiguration = list(
      CertificateType = "DISABLED"|"GENERATED"
    )
  ),
  LocationStates = list(
    list(
      Location = "string",
      Status = "NEW"|"DOWNLOADING"|"VALIDATING"|"BUILDING"|"ACTIVATING"|"ACTIVE"|"DELETING"|"ERROR"|"TERMINATED"
    )
  )
)
}
}
\description{
Creates a fleet of Amazon Elastic Compute Cloud (Amazon EC2) instances
to host your custom game server or Realtime Servers. Use this operation
to configure the computing resources for your fleet and provide
instructions for running game servers on each instance.

Most GameLift fleets can deploy instances to multiple locations,
including the home Region (where the fleet is created) and an optional
set of remote locations. Fleets that are created in the following AWS
Regions support multiple locations: us-east-1 (N. Virginia), us-west-2
(Oregon), eu-central-1 (Frankfurt), eu-west-1 (Ireland), ap-southeast-2
(Sydney), ap-northeast-1 (Tokyo), and ap-northeast-2 (Seoul). Fleets
that are created in other GameLift Regions can deploy instances in the
fleet's home Region only. All fleet instances use the same configuration
regardless of location; however, you can adjust capacity settings and
turn auto-scaling on/off for each location.

To create a fleet, choose the hardware for your instances, specify a
game server build or Realtime script to deploy, and provide a runtime
configuration to direct GameLift how to start and run game servers on
each instance in the fleet. Set permissions for inbound traffic to your
game servers, and enable optional features as needed. When creating a
multi-location fleet, provide a list of additional remote locations.

If successful, this operation creates a new Fleet resource and places it
in \code{NEW} status, which prompts GameLift to initiate the \href{https://docs.aws.amazon.com/gamelift/latest/developerguide/fleets-creation-workflow.html}{fleet creation workflow}.
You can track fleet creation by checking fleet status using
\code{\link[=gamelift_describe_fleet_attributes]{describe_fleet_attributes}} and
\code{\link[=gamelift_describe_fleet_location_attributes]{describe_fleet_location_attributes}}/,
or by monitoring fleet creation events using
\code{\link[=gamelift_describe_fleet_events]{describe_fleet_events}}. As soon as
the fleet status changes to \code{ACTIVE}, you can enable automatic scaling
for the fleet with \code{\link[=gamelift_put_scaling_policy]{put_scaling_policy}}
and set capacity for the home Region with
\code{\link[=gamelift_update_fleet_capacity]{update_fleet_capacity}}. When the
status of each remote location reaches \code{ACTIVE}, you can set capacity by
location using
\code{\link[=gamelift_update_fleet_capacity]{update_fleet_capacity}}.

\strong{Learn more}

\href{https://docs.aws.amazon.com/gamelift/latest/developerguide/fleets-intro.html}{Setting up fleets}

\href{https://docs.aws.amazon.com/gamelift/latest/developerguide/fleets-creating-debug.html#fleets-creating-debug-creation}{Debug fleet creation issues}

\href{https://docs.aws.amazon.com/gamelift/latest/developerguide/fleets-intro.html}{Multi-location fleets}

\strong{Related actions}

\code{\link[=gamelift_create_fleet]{create_fleet}} |
\code{\link[=gamelift_update_fleet_capacity]{update_fleet_capacity}} |
\code{\link[=gamelift_put_scaling_policy]{put_scaling_policy}} |
\code{\link[=gamelift_describe_ec2_instance_limits]{describe_ec2_instance_limits}}
| \code{\link[=gamelift_describe_fleet_attributes]{describe_fleet_attributes}} |
\code{\link[=gamelift_describe_fleet_location_attributes]{describe_fleet_location_attributes}}
| \code{\link[=gamelift_update_fleet_attributes]{update_fleet_attributes}} |
\code{\link[=gamelift_stop_fleet_actions]{stop_fleet_actions}} |
\code{\link[=gamelift_delete_fleet]{delete_fleet}} | \href{https://docs.aws.amazon.com/gamelift/latest/developerguide/reference-awssdk.html#reference-awssdk-resources-fleets}{All APIs by task}
}
\section{Request syntax}{
\preformatted{svc$create_fleet(
  Name = "string",
  Description = "string",
  BuildId = "string",
  ScriptId = "string",
  ServerLaunchPath = "string",
  ServerLaunchParameters = "string",
  LogPaths = list(
    "string"
  ),
  EC2InstanceType = "t2.micro"|"t2.small"|"t2.medium"|"t2.large"|"c3.large"|"c3.xlarge"|"c3.2xlarge"|"c3.4xlarge"|"c3.8xlarge"|"c4.large"|"c4.xlarge"|"c4.2xlarge"|"c4.4xlarge"|"c4.8xlarge"|"c5.large"|"c5.xlarge"|"c5.2xlarge"|"c5.4xlarge"|"c5.9xlarge"|"c5.12xlarge"|"c5.18xlarge"|"c5.24xlarge"|"c5a.large"|"c5a.xlarge"|"c5a.2xlarge"|"c5a.4xlarge"|"c5a.8xlarge"|"c5a.12xlarge"|"c5a.16xlarge"|"c5a.24xlarge"|"r3.large"|"r3.xlarge"|"r3.2xlarge"|"r3.4xlarge"|"r3.8xlarge"|"r4.large"|"r4.xlarge"|"r4.2xlarge"|"r4.4xlarge"|"r4.8xlarge"|"r4.16xlarge"|"r5.large"|"r5.xlarge"|"r5.2xlarge"|"r5.4xlarge"|"r5.8xlarge"|"r5.12xlarge"|"r5.16xlarge"|"r5.24xlarge"|"r5a.large"|"r5a.xlarge"|"r5a.2xlarge"|"r5a.4xlarge"|"r5a.8xlarge"|"r5a.12xlarge"|"r5a.16xlarge"|"r5a.24xlarge"|"m3.medium"|"m3.large"|"m3.xlarge"|"m3.2xlarge"|"m4.large"|"m4.xlarge"|"m4.2xlarge"|"m4.4xlarge"|"m4.10xlarge"|"m5.large"|"m5.xlarge"|"m5.2xlarge"|"m5.4xlarge"|"m5.8xlarge"|"m5.12xlarge"|"m5.16xlarge"|"m5.24xlarge"|"m5a.large"|"m5a.xlarge"|"m5a.2xlarge"|"m5a.4xlarge"|"m5a.8xlarge"|"m5a.12xlarge"|"m5a.16xlarge"|"m5a.24xlarge",
  EC2InboundPermissions = list(
    list(
      FromPort = 123,
      ToPort = 123,
      IpRange = "string",
      Protocol = "TCP"|"UDP"
    )
  ),
  NewGameSessionProtectionPolicy = "NoProtection"|"FullProtection",
  RuntimeConfiguration = list(
    ServerProcesses = list(
      list(
        LaunchPath = "string",
        Parameters = "string",
        ConcurrentExecutions = 123
      )
    ),
    MaxConcurrentGameSessionActivations = 123,
    GameSessionActivationTimeoutSeconds = 123
  ),
  ResourceCreationLimitPolicy = list(
    NewGameSessionsPerCreator = 123,
    PolicyPeriodInMinutes = 123
  ),
  MetricGroups = list(
    "string"
  ),
  PeerVpcAwsAccountId = "string",
  PeerVpcId = "string",
  FleetType = "ON_DEMAND"|"SPOT",
  InstanceRoleArn = "string",
  CertificateConfiguration = list(
    CertificateType = "DISABLED"|"GENERATED"
  ),
  Locations = list(
    list(
      Location = "string"
    )
  ),
  Tags = list(
    list(
      Key = "string",
      Value = "string"
    )
  )
)
}
}

\keyword{internal}
