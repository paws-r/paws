% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/gamelift_operations.R
\name{gamelift_create_fleet}
\alias{gamelift_create_fleet}
\title{Creates a new fleet to run your game servers}
\usage{
gamelift_create_fleet(Name, Description, BuildId, ServerLaunchPath,
  ServerLaunchParameters, LogPaths, EC2InstanceType,
  EC2InboundPermissions, NewGameSessionProtectionPolicy,
  RuntimeConfiguration, ResourceCreationLimitPolicy, MetricGroups,
  PeerVpcAwsAccountId, PeerVpcId, FleetType, InstanceRoleArn)
}
\arguments{
\item{Name}{[required] Descriptive label that is associated with a fleet. Fleet names do not
need to be unique.}

\item{Description}{Human-readable description of a fleet.}

\item{BuildId}{[required] Unique identifier for a build to be deployed on the new fleet. The build
must have been successfully uploaded to Amazon GameLift and be in a
\code{READY} status. This fleet setting cannot be changed once the fleet is
created.}

\item{ServerLaunchPath}{This parameter is no longer used. Instead, specify a server launch path
using the \code{RuntimeConfiguration} parameter. (Requests that specify a
server launch path and launch parameters instead of a run-time
configuration will continue to work.)}

\item{ServerLaunchParameters}{This parameter is no longer used. Instead, specify server launch
parameters in the \code{RuntimeConfiguration} parameter. (Requests that
specify a server launch path and launch parameters instead of a run-time
configuration will continue to work.)}

\item{LogPaths}{This parameter is no longer used. Instead, to specify where Amazon
GameLift should store log files once a server process shuts down, use
the Amazon GameLift server API \code{ProcessReady()} and specify one or more
directory paths in \code{logParameters}. See more information in the \href{https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-sdk-server-api-ref.html#gamelift-sdk-server-api-ref-dataypes-process}{Server API Reference}.}

\item{EC2InstanceType}{[required] Name of an EC2 instance type that is supported in Amazon GameLift. A
fleet instance type determines the computing resources of each instance
in the fleet, including CPU, memory, storage, and networking capacity.
Amazon GameLift supports the following EC2 instance types. See \href{http://aws.amazon.com/ec2/instance-types/}{Amazon EC2 Instance Types} for
detailed descriptions.}

\item{EC2InboundPermissions}{Range of IP addresses and port settings that permit inbound traffic to
access server processes running on the fleet. If no inbound permissions
are set, including both IP address range and port range, the server
processes in the fleet cannot accept connections. You can specify one or
more sets of permissions for a fleet.}

\item{NewGameSessionProtectionPolicy}{Game session protection policy to apply to all instances in this fleet.
If this parameter is not set, instances in this fleet default to no
protection. You can change a fleet's protection policy using
UpdateFleetAttributes, but this change will only affect sessions created
after the policy change. You can also set protection for individual
instances using UpdateGameSession.
\itemize{
\item \strong{NoProtection} \-- The game session can be terminated during a
scale-down event.
\item \strong{FullProtection} \-- If the game session is in an \code{ACTIVE} status,
it cannot be terminated during a scale-down event.
}}

\item{RuntimeConfiguration}{Instructions for launching server processes on each instance in the
fleet. The run-time configuration for a fleet has a collection of server
process configurations, one for each type of server process to run on an
instance. A server process configuration specifies the location of the
server executable, launch parameters, and the number of concurrent
processes with that configuration to maintain on each instance. A
CreateFleet request must include a run-time configuration with at least
one server process configuration; otherwise the request fails with an
invalid request exception. (This parameter replaces the parameters
\code{ServerLaunchPath} and \code{ServerLaunchParameters}; requests that contain
values for these parameters instead of a run-time configuration will
continue to work.)}

\item{ResourceCreationLimitPolicy}{Policy that limits the number of game sessions an individual player can
create over a span of time for this fleet.}

\item{MetricGroups}{Name of an Amazon CloudWatch metric group to add this fleet to. A metric
group aggregates the metrics for all fleets in the group. Specify an
existing metric group name, or provide a new name to create a new metric
group. A fleet can only be included in one metric group at a time.}

\item{PeerVpcAwsAccountId}{Unique identifier for the AWS account with the VPC that you want to peer
your Amazon GameLift fleet with. You can find your Account ID in the AWS
Management Console under account settings.}

\item{PeerVpcId}{Unique identifier for a VPC with resources to be accessed by your Amazon
GameLift fleet. The VPC must be in the same region where your fleet is
deployed. Look up a VPC ID using the \href{https://console.aws.amazon.com/vpc/}{VPC Dashboard} in the AWS Management
Console. Learn more about VPC peering in \href{https://docs.aws.amazon.com/gamelift/latest/developerguide/vpc-peering.html}{VPC Peering with Amazon GameLift Fleets}.}

\item{FleetType}{Indicates whether to use on-demand instances or spot instances for this
fleet. If empty, the default is ON\_DEMAND. Both categories of instances
use identical hardware and configurations, based on the instance type
selected for this fleet. You can acquire on-demand instances at any time
for a fixed price and keep them as long as you need them. Spot instances
have lower prices, but spot pricing is variable, and while in use they
can be interrupted (with a two-minute notification). Learn more about
Amazon GameLift spot instances with at \href{https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-sdk-server-credentials.html}{Set up Access to External Services}.}

\item{InstanceRoleArn}{Unique identifier for an AWS IAM role that manages access to your AWS
services. Any application that runs on an instance in this fleet can
assume the role, including install scripts, server processs, daemons
(background processes). Create a role or look up a role's ARN using the
\href{https://console.aws.amazon.com/iam/}{IAM dashboard} in the AWS
Management Console. Learn more about using on-box credentials for your
game servers at \href{https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-sdk-server-resources.html}{Access external resources from a game server}.}
}
\description{
Creates a new fleet to run your game servers. A fleet is a set of Amazon
Elastic Compute Cloud (Amazon EC2) instances, each of which can run
multiple server processes to host game sessions. You set up a fleet to
use instances with certain hardware specifications (see \href{http://aws.amazon.com/ec2/instance-types/}{Amazon EC2 Instance Types}), and deploy
your game build to the fleet.
}
\details{
To create a new fleet, you must provide the following: (1) a fleet name,
(2) an EC2 instance type, (3) the build ID for your game build, and (4)
a run-time configuration, which specifies the server processes to run on
each instance in the fleet. If fleet type is not set, the new fleet will
use on-demand instances by default.

If the \code{CreateFleet} call is successful, Amazon GameLift performs the
following tasks. You can track the process of a fleet by checking the
fleet status or by monitoring fleet creation events:
\itemize{
\item Creates a fleet record. Status: \code{NEW}.
\item Begins writing events to the fleet event log, which can be accessed
in the Amazon GameLift console.
}

Sets the fleet's target capacity to 1 (desired instances), which
triggers Amazon GameLift to start one new EC2 instance.
\itemize{
\item Downloads the game build to the new instance and installs it.
Statuses: \code{DOWNLOADING}, \code{VALIDATING}, \code{BUILDING}.
\item Starts launching server processes on the instance. If the fleet is
configured to run multiple server processes per instance, Amazon
GameLift staggers each launch by a few seconds. Status:
\code{ACTIVATING}.
\item Sets the fleet's status to \code{ACTIVE} as soon as one server process
is ready to host a game session.
}

\strong{Learn more}

\href{https://docs.aws.amazon.com/gamelift/latest/developerguide/fleets-intro.html}{Working with Fleets}.

\strong{Related operations}
\itemize{
\item CreateFleet
\item ListFleets
\item DeleteFleet
\item Describe fleets:
\item DescribeFleetAttributes
\item DescribeFleetCapacity
\item DescribeFleetPortSettings
\item DescribeFleetUtilization
\item DescribeRuntimeConfiguration
\item DescribeEC2InstanceLimits
\item DescribeFleetEvents
\item Update fleets:
\item UpdateFleetAttributes
\item UpdateFleetCapacity
\item UpdateFleetPortSettings
\item UpdateRuntimeConfiguration
\item Manage fleet actions:
\item StartFleetActions
\item StopFleetActions
}
}
\section{Request syntax}{
\preformatted{svc$create_fleet(
  Name = "string",
  Description = "string",
  BuildId = "string",
  ServerLaunchPath = "string",
  ServerLaunchParameters = "string",
  LogPaths = list(
    "string"
  ),
  EC2InstanceType = "t2.micro"|"t2.small"|"t2.medium"|"t2.large"|"c3.large"|"c3.xlarge"|"c3.2xlarge"|"c3.4xlarge"|"c3.8xlarge"|"c4.large"|"c4.xlarge"|"c4.2xlarge"|"c4.4xlarge"|"c4.8xlarge"|"r3.large"|"r3.xlarge"|"r3.2xlarge"|"r3.4xlarge"|"r3.8xlarge"|"r4.large"|"r4.xlarge"|"r4.2xlarge"|"r4.4xlarge"|"r4.8xlarge"|"r4.16xlarge"|"m3.medium"|"m3.large"|"m3.xlarge"|"m3.2xlarge"|"m4.large"|"m4.xlarge"|"m4.2xlarge"|"m4.4xlarge"|"m4.10xlarge",
  EC2InboundPermissions = list(
    list(
      FromPort = 123,
      ToPort = 123,
      IpRange = "string",
      Protocol = "TCP"|"UDP"
    )
  ),
  NewGameSessionProtectionPolicy = "NoProtection"|"FullProtection",
  RuntimeConfiguration = list(
    ServerProcesses = list(
      list(
        LaunchPath = "string",
        Parameters = "string",
        ConcurrentExecutions = 123
      )
    ),
    MaxConcurrentGameSessionActivations = 123,
    GameSessionActivationTimeoutSeconds = 123
  ),
  ResourceCreationLimitPolicy = list(
    NewGameSessionsPerCreator = 123,
    PolicyPeriodInMinutes = 123
  ),
  MetricGroups = list(
    "string"
  ),
  PeerVpcAwsAccountId = "string",
  PeerVpcId = "string",
  FleetType = "ON_DEMAND"|"SPOT",
  InstanceRoleArn = "string"
)
}
}

\keyword{internal}
