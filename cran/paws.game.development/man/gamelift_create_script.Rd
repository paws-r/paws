% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/gamelift_operations.R
\name{gamelift_create_script}
\alias{gamelift_create_script}
\title{Creates a new script record for your Realtime Servers script}
\usage{
gamelift_create_script(Name, Version, StorageLocation, ZipFile, Tags)
}
\arguments{
\item{Name}{A descriptive label that is associated with a script. Script names do
not need to be unique. You can use
\code{\link[=gamelift_update_script]{update_script}} to change this value later.}

\item{Version}{The version that is associated with a build or script. Version strings
do not need to be unique. You can use
\code{\link[=gamelift_update_script]{update_script}} to change this value later.}

\item{StorageLocation}{The Amazon S3 location of your Realtime scripts. The storage location
must specify the S3 bucket name, the zip file name (the "key"), and an
IAM role ARN that allows Amazon GameLift to access the S3 storage
location. The S3 bucket must be in the same Region where you are
creating a new script. By default, Amazon GameLift uploads the latest
version of the zip file; if you have S3 object versioning turned on, you
can use the \code{ObjectVersion} parameter to specify an earlier version. To
call this operation with a storage location, you must have IAM PassRole
permission. For more details on IAM roles and PassRole permissions, see
\href{https://docs.aws.amazon.com/gamelift/latest/developerguide/setting-up-role.html}{Set up a role for GameLift access}.}

\item{ZipFile}{A data object containing your Realtime scripts and dependencies as a zip
file. The zip file can have one or multiple files. Maximum size of a zip
file is 5 MB.

When using the AWS CLI tool to create a script, this parameter is set to
the zip file name. It must be prepended with the string "fileb://" to
indicate that the file data is a binary object. For example:
\verb{--zip-file fileb://myRealtimeScript.zip}.}

\item{Tags}{A list of labels to assign to the new script resource. Tags are
developer-defined key-value pairs. Tagging AWS resources are useful for
resource management, access management and cost allocation. For more
information, see \href{https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html}{Tagging AWS Resources}
in the \emph{AWS General Reference}. Once the resource is created, you can
use \code{\link[=gamelift_tag_resource]{tag_resource}},
\code{\link[=gamelift_untag_resource]{untag_resource}}, and
\code{\link[=gamelift_list_tags_for_resource]{list_tags_for_resource}} to add,
remove, and view tags. The maximum tag limit may be lower than stated.
See the AWS General Reference for actual tagging limits.}
}
\value{
A list with the following syntax:\preformatted{list(
  Script = list(
    ScriptId = "string",
    ScriptArn = "string",
    Name = "string",
    Version = "string",
    SizeOnDisk = 123,
    CreationTime = as.POSIXct(
      "2015-01-01"
    ),
    StorageLocation = list(
      Bucket = "string",
      Key = "string",
      RoleArn = "string",
      ObjectVersion = "string"
    )
  )
)
}
}
\description{
Creates a new script record for your Realtime Servers script. Realtime
scripts are JavaScript that provide configuration settings and optional
custom game logic for your game. The script is deployed when you create
a Realtime Servers fleet to host your game sessions. Script logic is
executed during an active game session.

To create a new script record, specify a script name and provide the
script file(s). The script files and all dependencies must be zipped
into a single file. You can pull the zip file from either of these
locations:
\itemize{
\item A locally available directory. Use the \emph{ZipFile} parameter for this
option.
\item An Amazon Simple Storage Service (Amazon S3) bucket under your AWS
account. Use the \emph{StorageLocation} parameter for this option. You'll
need to have an Identity Access Management (IAM) role that allows
the Amazon GameLift service to access your S3 bucket.
}

If the call is successful, a new script record is created with a unique
script ID. If the script file is provided as a local file, the file is
uploaded to an Amazon GameLift-owned S3 bucket and the script record's
storage location reflects this location. If the script file is provided
as an S3 bucket, Amazon GameLift accesses the file at this storage
location as needed for deployment.

\strong{Learn more}

\href{https://docs.aws.amazon.com/gamelift/latest/developerguide/realtime-intro.html}{Amazon GameLift Realtime Servers}

\href{https://docs.aws.amazon.com/gamelift/latest/developerguide/setting-up-role.html}{Set Up a Role for Amazon GameLift Access}

\strong{Related operations}
\itemize{
\item \code{\link[=gamelift_create_script]{create_script}}
\item \code{\link[=gamelift_list_scripts]{list_scripts}}
\item \code{\link[=gamelift_describe_script]{describe_script}}
\item \code{\link[=gamelift_update_script]{update_script}}
\item \code{\link[=gamelift_delete_script]{delete_script}}
}
}
\section{Request syntax}{
\preformatted{svc$create_script(
  Name = "string",
  Version = "string",
  StorageLocation = list(
    Bucket = "string",
    Key = "string",
    RoleArn = "string",
    ObjectVersion = "string"
  ),
  ZipFile = raw,
  Tags = list(
    list(
      Key = "string",
      Value = "string"
    )
  )
)
}
}

\keyword{internal}
