% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/gamelift_operations.R
\name{gamelift_start_matchmaking}
\alias{gamelift_start_matchmaking}
\title{Uses FlexMatch to create a game match for a group of players based on
custom matchmaking rules}
\usage{
gamelift_start_matchmaking(TicketId, ConfigurationName, Players)
}
\arguments{
\item{TicketId}{A unique identifier for a matchmaking ticket. If no ticket ID is
specified here, Amazon GameLift will generate one in the form of a UUID.
Use this identifier to track the matchmaking ticket status and retrieve
match results.}

\item{ConfigurationName}{[required] Name of the matchmaking configuration to use for this request.
Matchmaking configurations must exist in the same Region as this
request. You can use either the configuration name or ARN value.}

\item{Players}{[required] Information on each player to be matched. This information must include
a player ID, and may contain player attributes and latency data to be
used in the matchmaking process. After a successful match, \code{Player}
objects contain the name of the team the player is assigned to.}
}
\description{
Uses FlexMatch to create a game match for a group of players based on
custom matchmaking rules. If you're also using GameLift hosting, a new
game session is started for the matched players. Each matchmaking
request identifies one or more players to find a match for, and
specifies the type of match to build, including the team configuration
and the rules for an acceptable match. When a matchmaking request
identifies a group of players who want to play together, FlexMatch finds
additional players to fill the match. Match type, rules, and other
features are defined in a \code{MatchmakingConfiguration}.

To start matchmaking, provide a unique ticket ID, specify a matchmaking
configuration, and include the players to be matched. For each player,
you must also include the player attribute values that are required by
the matchmaking configuration (in the rule set). If successful, a
matchmaking ticket is returned with status set to \code{QUEUED}.

Track the status of the ticket to respond as needed. If you're also
using GameLift hosting, a successfully completed ticket contains game
session connection information. Ticket status updates are tracked using
event notification through Amazon Simple Notification Service (SNS),
which is defined in the matchmaking configuration.

\strong{Learn more}

\href{https://docs.aws.amazon.com/gamelift/latest/flexmatchguide/match-client.html}{Add FlexMatch to a Game Client}

\href{https://docs.aws.amazon.com/gamelift/latest/flexmatchguide/match-notification.html}{Set Up FlexMatch Event Notification}

\href{https://docs.aws.amazon.com/gamelift/latest/flexmatchguide/match-tasks.html}{FlexMatch Integration Roadmap}

\href{https://docs.aws.amazon.com/gamelift/latest/flexmatchguide/gamelift-match.html}{How GameLift FlexMatch Works}

\strong{Related operations}
\itemize{
\item StartMatchmaking
\item DescribeMatchmaking
\item StopMatchmaking
\item AcceptMatch
\item StartMatchBackfill
}
}
\section{Request syntax}{
\preformatted{svc$start_matchmaking(
  TicketId = "string",
  ConfigurationName = "string",
  Players = list(
    list(
      PlayerId = "string",
      PlayerAttributes = list(
        list(
          S = "string",
          N = 123.0,
          SL = list(
            "string"
          ),
          SDM = list(
            123.0
          )
        )
      ),
      Team = "string",
      LatencyInMs = list(
        123
      )
    )
  )
)
}
}

\keyword{internal}
