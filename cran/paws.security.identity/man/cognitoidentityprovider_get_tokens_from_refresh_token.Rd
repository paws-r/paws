% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cognitoidentityprovider_operations.R
\name{cognitoidentityprovider_get_tokens_from_refresh_token}
\alias{cognitoidentityprovider_get_tokens_from_refresh_token}
\title{Given a refresh token, issues new ID, access, and optionally refresh
tokens for the user who owns the submitted token}
\usage{
cognitoidentityprovider_get_tokens_from_refresh_token(
  RefreshToken,
  ClientId,
  ClientSecret = NULL,
  DeviceKey = NULL,
  ClientMetadata = NULL
)
}
\arguments{
\item{RefreshToken}{[required] A valid refresh token that can authorize the request for new tokens.
When refresh token rotation is active in the requested app client, this
token is invalidated after the request is complete.}

\item{ClientId}{[required] The app client that issued the refresh token to the user who wants to
request new tokens.}

\item{ClientSecret}{The client secret of the requested app client, if the client has a
secret.}

\item{DeviceKey}{When you enable device remembering, Amazon Cognito issues a device key
that you can use for device authentication that bypasses multi-factor
authentication (MFA). To implement
\code{\link[=cognitoidentityprovider_get_tokens_from_refresh_token]{get_tokens_from_refresh_token}}
in a user pool with device remembering, you must capture the device key
from the initial authentication request. If your application doesn't
provide the key of a registered device, Amazon Cognito issues a new one.
You must provide the confirmed device key in this request if device
remembering is enabled in your user pool.

For more information about device remembering, see \href{https://docs.aws.amazon.com/cognito/latest/developerguide/amazon-cognito-user-pools-device-tracking.html}{Working with devices}.}

\item{ClientMetadata}{A map of custom key-value pairs that you can provide as input for
certain custom workflows that this action triggers.

You create custom workflows by assigning Lambda functions to user pool
triggers. When you use the
\code{\link[=cognitoidentityprovider_get_tokens_from_refresh_token]{get_tokens_from_refresh_token}}
API action, Amazon Cognito invokes the Lambda function the pre token
generation trigger.

For more information, see \href{https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-working-with-lambda-triggers.html}{Using Lambda triggers}
in the \emph{Amazon Cognito Developer Guide}.

When you use the \code{ClientMetadata} parameter, note that Amazon Cognito
won't do the following:
\itemize{
\item Store the \code{ClientMetadata} value. This data is available only to
Lambda triggers that are assigned to a user pool to support custom
workflows. If your user pool configuration doesn't include triggers,
the \code{ClientMetadata} parameter serves no purpose.
\item Validate the \code{ClientMetadata} value.
\item Encrypt the \code{ClientMetadata} value. Don't send sensitive information
in this parameter.
}}
}
\description{
Given a refresh token, issues new ID, access, and optionally refresh tokens for the user who owns the submitted token. This operation issues a new refresh token and invalidates the original refresh token after an optional grace period when refresh token rotation is enabled. If refresh token rotation is disabled, issues new ID and access tokens only.

See \url{https://www.paws-r-sdk.com/docs/cognitoidentityprovider_get_tokens_from_refresh_token/} for full documentation.
}
\keyword{internal}
