% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/devicefarm_operations.R
\name{devicefarm_get_device_pool_compatibility}
\alias{devicefarm_get_device_pool_compatibility}
\title{Gets information about compatibility with a device pool}
\usage{
devicefarm_get_device_pool_compatibility(devicePoolArn, appArn,
  testType, test, configuration)
}
\arguments{
\item{devicePoolArn}{[required] The device pool's ARN.}

\item{appArn}{The ARN of the app that is associated with the specified device pool.}

\item{testType}{The test type for the specified device pool.

Allowed values include the following:
\itemize{
\item BUILTIN_FUZZ.
\item BUILTIN_EXPLORER. For Android, an app explorer that traverses an
Android app, interacting with it and capturing screenshots at the
same time.
\item APPIUM_JAVA_JUNIT.
\item APPIUM_JAVA_TESTNG.
\item APPIUM_PYTHON.
\item APPIUM_NODE.
\item APPIUM_RUBY.
\item APPIUM_WEB_JAVA_JUNIT.
\item APPIUM_WEB_JAVA_TESTNG.
\item APPIUM_WEB_PYTHON.
\item APPIUM_WEB_NODE.
\item APPIUM_WEB_RUBY.
\item CALABASH.
\item INSTRUMENTATION.
\item UIAUTOMATION.
\item UIAUTOMATOR.
\item XCTEST.
\item XCTEST_UI.
}}

\item{test}{Information about the uploaded test to be run against the device pool.}

\item{configuration}{An object that contains information about the settings for a run.}
}
\value{
A list with the following syntax:\preformatted{list(
  compatibleDevices = list(
    list(
      device = list(
        arn = "string",
        name = "string",
        manufacturer = "string",
        model = "string",
        modelId = "string",
        formFactor = "PHONE"|"TABLET",
        platform = "ANDROID"|"IOS",
        os = "string",
        cpu = list(
          frequency = "string",
          architecture = "string",
          clock = 123.0
        ),
        resolution = list(
          width = 123,
          height = 123
        ),
        heapSize = 123,
        memory = 123,
        image = "string",
        carrier = "string",
        radio = "string",
        remoteAccessEnabled = TRUE|FALSE,
        remoteDebugEnabled = TRUE|FALSE,
        fleetType = "string",
        fleetName = "string",
        instances = list(
          list(
            arn = "string",
            deviceArn = "string",
            labels = list(
              "string"
            ),
            status = "IN_USE"|"PREPARING"|"AVAILABLE"|"NOT_AVAILABLE",
            udid = "string",
            instanceProfile = list(
              arn = "string",
              packageCleanup = TRUE|FALSE,
              excludeAppPackagesFromCleanup = list(
                "string"
              ),
              rebootAfterUse = TRUE|FALSE,
              name = "string",
              description = "string"
            )
          )
        ),
        availability = "TEMPORARY_NOT_AVAILABLE"|"BUSY"|"AVAILABLE"|"HIGHLY_AVAILABLE"
      ),
      compatible = TRUE|FALSE,
      incompatibilityMessages = list(
        list(
          message = "string",
          type = "ARN"|"PLATFORM"|"FORM_FACTOR"|"MANUFACTURER"|"REMOTE_ACCESS_ENABLED"|"REMOTE_DEBUG_ENABLED"|"APPIUM_VERSION"|"INSTANCE_ARN"|"INSTANCE_LABELS"|"FLEET_TYPE"|"OS_VERSION"|"MODEL"|"AVAILABILITY"
        )
      )
    )
  ),
  incompatibleDevices = list(
    list(
      device = list(
        arn = "string",
        name = "string",
        manufacturer = "string",
        model = "string",
        modelId = "string",
        formFactor = "PHONE"|"TABLET",
        platform = "ANDROID"|"IOS",
        os = "string",
        cpu = list(
          frequency = "string",
          architecture = "string",
          clock = 123.0
        ),
        resolution = list(
          width = 123,
          height = 123
        ),
        heapSize = 123,
        memory = 123,
        image = "string",
        carrier = "string",
        radio = "string",
        remoteAccessEnabled = TRUE|FALSE,
        remoteDebugEnabled = TRUE|FALSE,
        fleetType = "string",
        fleetName = "string",
        instances = list(
          list(
            arn = "string",
            deviceArn = "string",
            labels = list(
              "string"
            ),
            status = "IN_USE"|"PREPARING"|"AVAILABLE"|"NOT_AVAILABLE",
            udid = "string",
            instanceProfile = list(
              arn = "string",
              packageCleanup = TRUE|FALSE,
              excludeAppPackagesFromCleanup = list(
                "string"
              ),
              rebootAfterUse = TRUE|FALSE,
              name = "string",
              description = "string"
            )
          )
        ),
        availability = "TEMPORARY_NOT_AVAILABLE"|"BUSY"|"AVAILABLE"|"HIGHLY_AVAILABLE"
      ),
      compatible = TRUE|FALSE,
      incompatibilityMessages = list(
        list(
          message = "string",
          type = "ARN"|"PLATFORM"|"FORM_FACTOR"|"MANUFACTURER"|"REMOTE_ACCESS_ENABLED"|"REMOTE_DEBUG_ENABLED"|"APPIUM_VERSION"|"INSTANCE_ARN"|"INSTANCE_LABELS"|"FLEET_TYPE"|"OS_VERSION"|"MODEL"|"AVAILABILITY"
        )
      )
    )
  )
)
}
}
\description{
Gets information about compatibility with a device pool.
}
\section{Request syntax}{
\preformatted{svc$get_device_pool_compatibility(
  devicePoolArn = "string",
  appArn = "string",
  testType = "BUILTIN_FUZZ"|"BUILTIN_EXPLORER"|"WEB_PERFORMANCE_PROFILE"|"APPIUM_JAVA_JUNIT"|"APPIUM_JAVA_TESTNG"|"APPIUM_PYTHON"|"APPIUM_NODE"|"APPIUM_RUBY"|"APPIUM_WEB_JAVA_JUNIT"|"APPIUM_WEB_JAVA_TESTNG"|"APPIUM_WEB_PYTHON"|"APPIUM_WEB_NODE"|"APPIUM_WEB_RUBY"|"CALABASH"|"INSTRUMENTATION"|"UIAUTOMATION"|"UIAUTOMATOR"|"XCTEST"|"XCTEST_UI"|"REMOTE_ACCESS_RECORD"|"REMOTE_ACCESS_REPLAY",
  test = list(
    type = "BUILTIN_FUZZ"|"BUILTIN_EXPLORER"|"WEB_PERFORMANCE_PROFILE"|"APPIUM_JAVA_JUNIT"|"APPIUM_JAVA_TESTNG"|"APPIUM_PYTHON"|"APPIUM_NODE"|"APPIUM_RUBY"|"APPIUM_WEB_JAVA_JUNIT"|"APPIUM_WEB_JAVA_TESTNG"|"APPIUM_WEB_PYTHON"|"APPIUM_WEB_NODE"|"APPIUM_WEB_RUBY"|"CALABASH"|"INSTRUMENTATION"|"UIAUTOMATION"|"UIAUTOMATOR"|"XCTEST"|"XCTEST_UI"|"REMOTE_ACCESS_RECORD"|"REMOTE_ACCESS_REPLAY",
    testPackageArn = "string",
    testSpecArn = "string",
    filter = "string",
    parameters = list(
      "string"
    )
  ),
  configuration = list(
    extraDataPackageArn = "string",
    networkProfileArn = "string",
    locale = "string",
    location = list(
      latitude = 123.0,
      longitude = 123.0
    ),
    vpceConfigurationArns = list(
      "string"
    ),
    customerArtifactPaths = list(
      iosPaths = list(
        "string"
      ),
      androidPaths = list(
        "string"
      ),
      deviceHostPaths = list(
        "string"
      )
    ),
    radios = list(
      wifi = TRUE|FALSE,
      bluetooth = TRUE|FALSE,
      nfc = TRUE|FALSE,
      gps = TRUE|FALSE
    ),
    auxiliaryApps = list(
      "string"
    ),
    billingMethod = "METERED"|"UNMETERED"
  )
)
}
}

\examples{
\dontrun{
# The following example returns information about the compatibility of a
# specific device pool, given its ARN.
svc$get_device_pool_compatibility(
  appArn = "arn:aws:devicefarm:us-west-2::app:123-456-EXAMPLE-GUID",
  devicePoolArn = "arn:aws:devicefarm:us-west-2::devicepool:123-456-EXAMPLE-GUID",
  testType = "APPIUM_PYTHON"
)
}

}
\keyword{internal}
