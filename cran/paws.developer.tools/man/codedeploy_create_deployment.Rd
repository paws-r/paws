% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/codedeploy_operations.R
\name{codedeploy_create_deployment}
\alias{codedeploy_create_deployment}
\title{Deploys an application revision through the specified deployment group}
\usage{
codedeploy_create_deployment(applicationName, deploymentGroupName,
  revision, deploymentConfigName, description,
  ignoreApplicationStopFailures, targetInstances,
  autoRollbackConfiguration, updateOutdatedInstancesOnly,
  fileExistsBehavior)
}
\arguments{
\item{applicationName}{[required] The name of an AWS CodeDeploy application associated with the IAM user
or AWS account.}

\item{deploymentGroupName}{The name of the deployment group.}

\item{revision}{The type and location of the revision to deploy.}

\item{deploymentConfigName}{The name of a deployment configuration associated with the IAM user or
AWS account.

If not specified, the value configured in the deployment group is used
as the default. If the deployment group does not have a deployment
configuration associated with it, CodeDeployDefault.OneAtATime is used
by default.}

\item{description}{A comment about the deployment.}

\item{ignoreApplicationStopFailures}{If true, then if an ApplicationStop, BeforeBlockTraffic, or
AfterBlockTraffic deployment lifecycle event to an instance fails, then
the deployment continues to the next deployment lifecycle event. For
example, if ApplicationStop fails, the deployment continues with
DownloadBundle. If BeforeBlockTraffic fails, the deployment continues
with BlockTraffic. If AfterBlockTraffic fails, the deployment continues
with ApplicationStop.

If false or not specified, then if a lifecycle event fails during a
deployment to an instance, that deployment fails. If deployment to that
instance is part of an overall deployment and the number of healthy
hosts is not less than the minimum number of healthy hosts, then a
deployment to the next instance is attempted.

During a deployment, the AWS CodeDeploy agent runs the scripts specified
for ApplicationStop, BeforeBlockTraffic, and AfterBlockTraffic in the
AppSpec file from the previous successful deployment. (All other scripts
are run from the AppSpec file in the current deployment.) If one of
these scripts contains an error and does not run successfully, the
deployment can fail.

If the cause of the failure is a script from the last successful
deployment that will never run successfully, create a new deployment and
use \code{ignoreApplicationStopFailures} to specify that the ApplicationStop,
BeforeBlockTraffic, and AfterBlockTraffic failures should be ignored.}

\item{targetInstances}{Information about the instances that belong to the replacement
environment in a blue/green deployment.}

\item{autoRollbackConfiguration}{Configuration information for an automatic rollback that is added when a
deployment is created.}

\item{updateOutdatedInstancesOnly}{Indicates whether to deploy to all instances or only to instances that
are not running the latest application revision.}

\item{fileExistsBehavior}{Information about how AWS CodeDeploy handles files that already exist in
a deployment target location but weren\'t part of the previous
successful deployment.

The fileExistsBehavior parameter takes any of the following values:
\itemize{
\item DISALLOW: The deployment fails. This is also the default behavior if
no option is specified.
\item OVERWRITE: The version of the file from the application revision
currently being deployed replaces the version already on the
instance.
\item RETAIN: The version of the file already on the instance is kept and
used as part of the new deployment.
}}
}
\description{
Deploys an application revision through the specified deployment group.
}
\section{Request syntax}{
\preformatted{svc$create_deployment(
  applicationName = "string",
  deploymentGroupName = "string",
  revision = list(
    revisionType = "S3"|"GitHub"|"String"|"AppSpecContent",
    s3Location = list(
      bucket = "string",
      key = "string",
      bundleType = "tar"|"tgz"|"zip"|"YAML"|"JSON",
      version = "string",
      eTag = "string"
    ),
    gitHubLocation = list(
      repository = "string",
      commitId = "string"
    ),
    string = list(
      content = "string",
      sha256 = "string"
    ),
    appSpecContent = list(
      content = "string",
      sha256 = "string"
    )
  ),
  deploymentConfigName = "string",
  description = "string",
  ignoreApplicationStopFailures = TRUE|FALSE,
  targetInstances = list(
    tagFilters = list(
      list(
        Key = "string",
        Value = "string",
        Type = "KEY_ONLY"|"VALUE_ONLY"|"KEY_AND_VALUE"
      )
    ),
    autoScalingGroups = list(
      "string"
    ),
    ec2TagSet = list(
      ec2TagSetList = list(
        list(
          list(
            Key = "string",
            Value = "string",
            Type = "KEY_ONLY"|"VALUE_ONLY"|"KEY_AND_VALUE"
          )
        )
      )
    )
  ),
  autoRollbackConfiguration = list(
    enabled = TRUE|FALSE,
    events = list(
      "DEPLOYMENT_FAILURE"|"DEPLOYMENT_STOP_ON_ALARM"|"DEPLOYMENT_STOP_ON_REQUEST"
    )
  ),
  updateOutdatedInstancesOnly = TRUE|FALSE,
  fileExistsBehavior = "DISALLOW"|"OVERWRITE"|"RETAIN"
)
}
}

\keyword{internal}
