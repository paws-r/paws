% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ssooidc_service.R
\name{ssooidc}
\alias{ssooidc}
\title{AWS SSO OIDC}
\usage{
ssooidc(config = list())
}
\arguments{
\item{config}{Optional configuration of credentials, endpoint, and/or region.
\itemize{
\item{\strong{access_key_id}:} {AWS access key ID}
\item{\strong{secret_access_key}:} {AWS secret access key}
\item{\strong{session_token}:} {AWS temporary session token}
\item{\strong{profile}:} {The name of a profile to use. If not given, then the default profile is used.}
\item{\strong{anonymous}:} {Set anonymous credentials.}
\item{\strong{endpoint}:} {The complete URL to use for the constructed client.}
\item{\strong{region}:} {The AWS Region used in instantiating the client.}
\item{\strong{close_connection}:} {Immediately close all HTTP connections.}
\item{\strong{timeout}:} {The time in seconds till a timeout exception is thrown when attempting to make a connection. The default is 60 seconds.}
\item{\strong{s3_force_path_style}:} {Set this to \code{true} to force the request to use path-style addressing, i.e., \verb{http://s3.amazonaws.com/BUCKET/KEY}.}
}}
}
\value{
A client for the service. You can call the service's operations using
syntax like \code{svc$operation(...)}, where \code{svc} is the name you've assigned
to the client. The available operations are listed in the
Operations section.
}
\description{
Amazon Web Services Single Sign On OpenID Connect (OIDC) is a web
service that enables a client (such as Amazon Web Services CLI or a
native application) to register with Amazon Web Services SSO. The
service also enables the client to fetch the user’s access token upon
successful authentication and authorization with Amazon Web Services
SSO.

Although Amazon Web Services Single Sign-On was renamed, the \code{sso} and
\code{identitystore} API namespaces will continue to retain their original
name for backward compatibility purposes. For more information, see
\href{https://docs.aws.amazon.com/singlesignon/latest/userguide/what-is.html#renamed}{Amazon Web Services SSO rename}.

\strong{Considerations for Using This Guide}

Before you begin using this guide, we recommend that you first review
the following important information about how the Amazon Web Services
SSO OIDC service works.
\itemize{
\item The Amazon Web Services SSO OIDC service currently implements only
the portions of the OAuth 2.0 Device Authorization Grant standard
(\href{https://www.rfc-editor.org/rfc/rfc8628}{https://tools.ietf.org/html/rfc8628})
that are necessary to enable single sign-on authentication with the
AWS CLI. Support for other OIDC flows frequently needed for native
applications, such as Authorization Code Flow (+ PKCE), will be
addressed in future releases.
\item The service emits only OIDC access tokens, such that obtaining a new
token (For example, token refresh) requires explicit user
re-authentication.
\item The access tokens provided by this service grant access to all AWS
account entitlements assigned to an Amazon Web Services SSO user,
not just a particular application.
\item The documentation in this guide does not describe the mechanism to
convert the access token into AWS Auth (“sigv4”) credentials for use
with IAM-protected AWS service endpoints. For more information, see
\href{https://docs.aws.amazon.com/singlesignon/latest/PortalAPIReference/API_GetRoleCredentials.html}{GetRoleCredentials}
in the \emph{Amazon Web Services SSO Portal API Reference Guide}.
}

For general information about Amazon Web Services SSO, see \href{https://docs.aws.amazon.com/singlesignon/latest/userguide/what-is.html}{What is Amazon Web Services SSO?}
in the \emph{Amazon Web Services SSO User Guide}.
}
\section{Service syntax}{


\if{html}{\out{<div class="sourceCode">}}\preformatted{svc <- ssooidc(
  config = list(
    credentials = list(
      creds = list(
        access_key_id = "string",
        secret_access_key = "string",
        session_token = "string"
      ),
      profile = "string",
      anonymous = "logical"
    ),
    endpoint = "string",
    region = "string",
    close_connection = "logical",
    timeout = "numeric",
    s3_force_path_style = "logical"
  )
)
}\if{html}{\out{</div>}}
}

\section{Operations}{

\tabular{ll}{
\link[=ssooidc_create_token]{create_token} \tab Creates and returns an access token for the authorized client\cr
\link[=ssooidc_register_client]{register_client} \tab Registers a client with Amazon Web Services SSO\cr
\link[=ssooidc_start_device_authorization]{start_device_authorization} \tab Initiates device authorization by requesting a pair of verification codes from the authorization service
}
}

\examples{
\dontrun{
svc <- ssooidc()
svc$create_token(
  Foo = 123
)
}

}
